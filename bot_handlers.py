import logging
from operator import itemgetter
from telebot import types
import database as db
from config import ADMIN_IDS, PLANS, INVITE_LINK_EXPIRY_HOURS, INVITE_LINK_MEMBER_LIMIT, GROUP_INVITE_LINK, WEBHOOK_URL, GROUP_CHAT_ID, RECURRING_PAYMENTS_ENABLED
import payments as pay
import datetime
import threading
import time
import os
import re
from typing import Dict, Optional, Tuple, Any

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

global security_thread_running
security_thread_running = False

# admin_states ser√° asignado desde app.py
admin_states = None  # Ser√° asignado desde app.py

# Diccionario para almacenar las animaciones de pago en curso
payment_animations = {}

# Variables para seguimiento de suscripciones procesadas
processed_cancelled_subs = set()  # Conjunto para almacenar IDs de suscripciones canceladas ya procesadas
last_cleanup_time = datetime.datetime.now()  # Para limpiar peri√≥dicamente el conjunto

# Funciones de utilidad
def parse_duration(duration_text: str) -> Optional[float]:
    """
    Parsea una duraci√≥n en texto y la convierte a d√≠as.
    Ejemplos: '7 days', '1 week', '1 month', '3 months', '10 minutes', '2 hours'
    Retorna None si no se puede parsear.
    """
    try:
        if not duration_text:
            return None
            
        duration_text = duration_text.lower().strip()
        logger.info(f"Parseando duraci√≥n: '{duration_text}'")
        
        # Definir diccionarios de mapeo para unidades
        minute_keywords = ['minute', 'min', 'minuto', 'minutos']
        hour_keywords = ['hour', 'hr', 'hora', 'horas']
        day_keywords = ['day', 'd√≠a', 'dias', 'days']
        week_keywords = ['week', 'semana', 'semanas']
        month_keywords = ['month', 'mes', 'meses']
        
        # Casos especiales predefinidos
        special_cases = {
            "10 minutes": 10 / (24 * 60),
            "10 minutos": 10 / (24 * 60),
            "1 minute": 1 / (24 * 60),
            "1 minuto": 1 / (24 * 60)
        }
        
        # Verificar casos especiales primero
        if duration_text in special_cases:
            return special_cases[duration_text]
        
        # Extraer n√∫meros y unidades
        numbers = ''.join(c if c.isdigit() else ' ' for c in duration_text).split()
        if not numbers:
            return None
        
        try:
            num = int(numbers[0])  # Tomar el primer n√∫mero
        except ValueError:
            logger.warning(f"No se pudo convertir '{numbers[0]}' a n√∫mero")
            return None
        
        # Determinar la unidad
        for keyword in minute_keywords:
            if keyword in duration_text:
                return num / (24 * 60)
        
        for keyword in hour_keywords:
            if keyword in duration_text:
                return num / 24
        
        for keyword in day_keywords:
            if keyword in duration_text:
                return num
        
        for keyword in week_keywords:
            if keyword in duration_text:
                return num * 7
        
        for keyword in month_keywords:
            if keyword in duration_text:
                return num * 30
        
        # Si es solo un n√∫mero, intentar interpretarlo como d√≠as
        if duration_text.replace(' ', '').isdigit():
            try:
                return int(duration_text)
            except ValueError:
                pass
        
        # Si no se reconoce ninguna unidad
        logger.warning(f"Unidad no reconocida en '{duration_text}'")
        return None
        
    except Exception as e:
        logger.error(f"Error al parsear duraci√≥n '{duration_text}': {str(e)}")
        return None

def create_invite_link(bot, user_id, sub_id):
    """
    Crea un enlace de invitaci√≥n √∫nico para el grupo VIP.
    Utiliza la API de Telegram para crear un enlace temporal y √∫nico.
    """
    try:
        from config import GROUP_CHAT_ID, INVITE_LINK_EXPIRY_HOURS, INVITE_LINK_MEMBER_LIMIT
        
        if not GROUP_CHAT_ID:
            logger.error("GROUP_CHAT_ID no est√° configurado")
            return None
            
        # Calcular la fecha de expiraci√≥n
        current_time = datetime.datetime.now()
        expire_date = int((current_time + datetime.timedelta(hours=INVITE_LINK_EXPIRY_HOURS)).timestamp())
        
        # Crear un enlace de invitaci√≥n √∫nico usando la API de Telegram
        logger.info(f"Generando enlace de invitaci√≥n √∫nico para usuario {user_id}")
        
        invite = bot.create_chat_invite_link(
            chat_id=GROUP_CHAT_ID,
            expire_date=expire_date,
            member_limit=INVITE_LINK_MEMBER_LIMIT,
            name=f"Invitaci√≥n para usuario {user_id}",
            creates_join_request=False
        )
        
        # Obtener el enlace de la respuesta
        invite_link = invite.invite_link
        
        # Guardar el enlace en la base de datos
        created_at = current_time
        expires_at = current_time + datetime.timedelta(hours=INVITE_LINK_EXPIRY_HOURS)
        
        db.save_invite_link(
            sub_id=sub_id,
            invite_link=invite_link,
            created_at=created_at,
            expires_at=expires_at
        )
        
        logger.info(f"Enlace de invitaci√≥n √∫nico creado para usuario {user_id}, expira en {INVITE_LINK_EXPIRY_HOURS} horas")
        
        return invite_link
        
    except Exception as e:
        logger.error(f"Error al crear enlace de invitaci√≥n: {str(e)}")
        return None

# Modificaciones a realizar en bot_handlers.py

# 1. Agregar funci√≥n para iniciar el proceso de verificaci√≥n diaria de renovaciones
def schedule_renewal_checks(bot):
    """
    Inicia un hilo separado para verificar renovaciones de suscripciones pendientes
    
    Args:
        bot: Instancia del bot de Telegram
        
    Returns:
        threading.Thread: Hilo iniciado para verificaciones
    """
    import threading
    import time
    import logging
    import datetime
    
    logger = logging.getLogger(__name__)
    
    def renewal_check_thread():
        """Funci√≥n ejecutada en un hilo separado para verificar renovaciones peri√≥dicamente"""
        # Indicador para saber si el hilo est√° activo
        global renewal_thread_running
        renewal_thread_running = True
        
        logger.info("üîÑ HILO DE RENOVACIONES INICIADO - Verificaci√≥n peri√≥dica activada")
        
        # Notificar a los administradores
        from config import ADMIN_IDS
        for admin_id in ADMIN_IDS:
            try:
                bot.send_message(
                    chat_id=admin_id,
                    text="üîÑ Sistema de renovaci√≥n autom√°tica iniciado: Se procesar√°n renovaciones diariamente."
                )
            except Exception:
                pass  # Ignorar errores al notificar
        
        # Variable para rastrear la √∫ltima fecha de verificaci√≥n completa
        last_full_check_date = None
        
        while renewal_thread_running:
            try:
                # Realizar verificaciones cada hora, pero procesamiento completo solo una vez al d√≠a
                current_time = datetime.datetime.now()
                
                # Verificar si debemos hacer una verificaci√≥n completa (cada 24 horas)
                do_full_check = False
                
                if last_full_check_date is None:
                    # Primera ejecuci√≥n
                    do_full_check = True
                elif (current_time - last_full_check_date).total_seconds() >= 86400:  # 24 horas
                    # Han pasado 24 horas desde la √∫ltima verificaci√≥n
                    do_full_check = True
                
                if do_full_check:
                    logger.info("üîç Iniciando verificaci√≥n completa de renovaciones")
                    
                    # Importar funci√≥n de procesamiento
                    import payments as pay
                    
                    # Procesar renovaciones
                    notified, errors = pay.process_subscription_renewals(bot)
                    
                    logger.info(f"‚úÖ Verificaci√≥n de renovaciones completada: {notified} notificaciones enviadas, {errors} errores")
                    
                    # Actualizar fecha de √∫ltima verificaci√≥n
                    last_full_check_date = current_time
                    
                    # Notificar a los administradores si hubo errores
                    if errors > 0:
                        from config import ADMIN_IDS
                        for admin_id in ADMIN_IDS:
                            try:
                                bot.send_message(
                                    chat_id=admin_id,
                                    text=f"‚ö†Ô∏è Alerta: Se encontraron {errors} errores durante el procesamiento de renovaciones autom√°ticas."
                                )
                            except Exception:
                                pass
                else:
                    # En verificaciones no completas, solo registrar actividad
                    logger.info("Hilo de renovaciones activo - Pr√≥xima verificaci√≥n completa en: " + 
                               str(datetime.timedelta(seconds=86400 - (current_time - last_full_check_date).total_seconds())))
                
                # Esperar antes de la pr√≥xima verificaci√≥n (1 hora)
                # Dividir en intervalos peque√±os para poder responder a se√±ales de parada
                for _ in range(30):  # 60 minutos = 1 hora
                    if not renewal_thread_running:
                        break
                    time.sleep(1)  # 60 segundos = 1 minuto
                
            except Exception as e:
                logger.error(f"‚ùå Error en ciclo de verificaci√≥n de renovaciones: {e}")
                # En caso de error, esperar y continuar
                time.sleep(300)  # 5 minutos
        
        logger.warning("‚ö†Ô∏è HILO DE RENOVACIONES TERMINADO")
        renewal_thread_running = False
    
    # Crear e iniciar el hilo
    thread = threading.Thread(target=renewal_check_thread, daemon=True)
    thread.start()
    
    logger.info("üîÑ Hilo de verificaci√≥n de renovaciones iniciado en segundo plano")
    
    return thread

def generate_plans_text():
    """
    Genera el texto de descripci√≥n de planes din√°micamente 
    con el toque encantador de tu portera anime ‚ú®
    """
    # Ordena los planes seg√∫n el campo 'order'
    sorted_plans = sorted(PLANS.items(), key=lambda x: x[1].get('order', 999))
    
    # Encabezado con un toque c√°lido
    payment_type = "Suscripciones" if RECURRING_PAYMENTS_ENABLED else "Planes"
    plans_text = f"üí∏ *Aqu√≠ tienes las {payment_type.lower()} disponibles ‡¥¶‡µç‡¥¶‡¥ø(·µî·óú·µî)*\n\n"
    
    # Agrega cada plan
    for plan_id, plan in sorted_plans:
        emoji = plan.get('button_emoji', 'üîπ')
        
        # Verifica si el plan tiene su propio tipo de pago
        plan_recurring = plan.get('recurring')
        is_recurring = RECURRING_PAYMENTS_ENABLED if plan_recurring is None else plan_recurring
        
        # Texto del tipo de pago
        payment_type_text = "(renovaci√≥n autom√°tica)" if is_recurring else "(pago √∫nico)"
        
        # Descripci√≥n
        description = plan.get('short_description', 
                              f"{plan['name']}: ${plan['price_usd']} / {plan['duration_days']} d√≠as")
        
        plans_text += f"{emoji} {description} {payment_type_text}\n"
    
    # Mensaje final de ayuda
    plans_text += "\nüßë‚Äçüè´ ¬øNecesitas ayuda para pagar? He preparado un tutorial para ti~ (À∂·µî ·µï ·µîÀ∂)"
    
    return plans_text


def start_processing_animation(bot, chat_id, message_id):
    """Inicia una animaci√≥n de procesamiento con mensajes kawaii en el mensaje"""
    try:
        # Mensajes kawaii m√°s entretenidos y personalizados
        animation_messages = [
            "üå∏ Preparando tu entrada VIP... üå∏",
            "üìù Anotando tu nombre en mi lista secreta~",
            "‚ú® Qu√© nombre tan lindo... jeje~ ‚ú®",
            "üéÄ Abriendo las puertas del club VIP~",
            "üåü Un momento m√°s... ¬°Todo listo! üåü",
            "üí∞ Oh casi lo olvido, falta el pago... üí∞"
        ]
        
        # Registrar la animaci√≥n
        payment_animations[chat_id] = {
            'active': True,
            'message_id': message_id,
            'current_frame': 0  # A√±adimos un contador para saber qu√© frame estamos mostrando
        }
        
        # Este bucle muestra cada mensaje una vez, garantizando la secuencia completa
        for i, message in enumerate(animation_messages):
            # Verificar si la animaci√≥n debe detenerse
            if chat_id not in payment_animations or not payment_animations[chat_id]['active']:
                logger.info(f"Animaci√≥n detenida para chat {chat_id}")
                break
                
            try:
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=message
                )
                
                # Actualizar el frame actual
                if chat_id in payment_animations:
                    payment_animations[chat_id]['current_frame'] = i
                
                # Esperar m√°s tiempo para que cada mensaje sea visible (3 segundos)
                time.sleep(3)
            except Exception as e:
                logger.error(f"Error al mostrar mensaje de animaci√≥n: {str(e)}")
                break
        
        # Si la animaci√≥n sigue activa despu√©s de mostrar todos los mensajes, 
        # continuar mostrando mensajes hasta que se desactive
        while chat_id in payment_animations and payment_animations[chat_id]['active']:
            frame = payment_animations[chat_id].get('current_frame', 0)
            next_frame = (frame + 1) % len(animation_messages)
            
            try:
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=animation_messages[next_frame]
                )
                
                # Actualizar el frame actual
                payment_animations[chat_id]['current_frame'] = next_frame
                
                # Esperar antes de la siguiente actualizaci√≥n
                time.sleep(3)
            except Exception as e:
                logger.error(f"Error en ciclo de animaci√≥n: {str(e)}")
                break
    except Exception as e:
        logger.error(f"Error en start_processing_animation: {str(e)}")
def generate_invite_link(bot, user_id, sub_id):
    """Genera un enlace de invitaci√≥n para el grupo VIP"""
    try:
        # Crear enlace con expiraci√≥n y l√≠mite de miembros
        invite_link = create_invite_link(bot, user_id, sub_id)
        
        if invite_link:
            logger.info(f"Enlace de invitaci√≥n generado para usuario {user_id}")
            return invite_link
        else:
            logger.error(f"No se pudo generar enlace de invitaci√≥n para usuario {user_id}")
            return None
            
    except Exception as e:
        logger.error(f"Error en generate_invite_link: {str(e)}")
        return None

def process_successful_subscription(bot, user_id: int, plan_id: str, payment_id: str, 
                                   payment_details: Dict, is_recurring: bool = None) -> bool:
    """
    Procesa un pago exitoso (suscripci√≥n recurrente o pago √∫nico)
    
    Args:
        bot: Instancia del bot de Telegram
        user_id: ID del usuario
        plan_id: ID del plan
        payment_id: ID del pago (subscription_id o order_id)
        payment_details: Detalles del pago de PayPal
        is_recurring: Si es un pago recurrente o √∫nico. Si es None, se usa la configuraci√≥n global
        
    Returns:
        bool: True si el proceso fue exitoso, False en caso contrario
    """
    try:
        # Verify if a subscription with this payment ID already exists
        existing_sub = db.get_subscription_by_payment_id(payment_id)
        if existing_sub:
            logger.info(f"Subscription already exists for payment {payment_id}, skipping creation")
            return True  # Return success as it's already been processed

        # Get plan details
        plan = PLANS.get(plan_id)
        if not plan:
            logger.error(f"Plan no encontrado: {plan_id}")
            return False
        
        # If is_recurring is not specified, use plan setting or global setting
        if is_recurring is None:
            plan_recurring = plan.get('recurring')
            is_recurring = RECURRING_PAYMENTS_ENABLED if plan_recurring is None else plan_recurring
        
        # Get user information
        user = db.get_user(user_id)
        if not user:
            # Save user with minimal information if not exists
            db.save_user(user_id)
            user = {'user_id': user_id, 'username': None, 'first_name': None, 'last_name': None}
        
        # Calculate dates with precise control
        start_date = datetime.datetime.now(datetime.timezone.utc)
        
        # Ensure duration is exactly as specified (fix for 1-day plans)
        days = plan['duration_days']
        hours = int(days * 24)
        
        # Calculate end date as exact hours from start date
        end_date = start_date + datetime.timedelta(hours=hours)
        
        # Log exact calculation for verification
        logger.info(f"Subscription calculation: Plan {plan_id}, Duration: {days} days")
        logger.info(f"Start: {start_date}, End: {end_date}, Total hours: {hours}")
        
        # Determinar el tipo de pago
        payment_type_name = "suscripci√≥n" if is_recurring else "pago √∫nico"
        
        # Create subscription in database
        sub_id = db.create_subscription(
            user_id=user_id,
            plan=plan_id,
            price_usd=plan['price_usd'],
            start_date=start_date,
            end_date=end_date,
            status='ACTIVE',
            paypal_sub_id=payment_id,
            is_recurring=is_recurring
        )
        
        # Send provisional message while generating the invitation link
        provisional_message = bot.send_message(
            chat_id=user_id,
            text="üîÑ *Preparando tu acceso VIP...*\n\nEstamos generando tu enlace de invitaci√≥n exclusivo. Por favor, espera un momento.",
            parse_mode='Markdown'
        )
        
        # Generate unique invitation link
        invite_link = generate_invite_link(bot, user_id, sub_id)
        
        if not invite_link:
            logger.error(f"No se pudo generar enlace de invitaci√≥n para usuario {user_id}")
            bot.edit_message_text(
                chat_id=user_id,
                message_id=provisional_message.message_id,
                text = (
                    "‚ö†Ô∏è *Suscripci√≥n activada, pero hubo un peque√±o problemita con... la entrada (√≥Ôπè√≤ÔΩ°)~*\n\n"
                    "Tu suscripci√≥n est√° registrada correctamente, ¬°yay! üéâ Pero no pudimos generar el enlace de invitaci√≥n esta vez.\n\n"
                    "Por favor, usa el comando /recover para solicitar uno nuevo o contacta con soporte si necesitas ayuda. Estar√© esperando para asistirte~ üíå"
                ),
                parse_mode='Markdown'
            )
            
            # Notify administrators about the problem
            admin_error_notification = (
                "üö® *ERROR CON ENLACE DE INVITACI√ìN*\n\n"
                f"Usuario: {user.get('username', 'Sin username')} (id{user_id})\n"
                f"Suscripci√≥n: {sub_id}\n"
                "Error: No se pudo generar enlace de invitaci√≥n\n\n"
                "El usuario ha sido notificado para que use /recover"
            )
            
            for admin_id in ADMIN_IDS:
                try:
                    bot.send_message(
                        chat_id=admin_id,
                        text=admin_error_notification,
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"Error al notificar al admin {admin_id}: {str(e)}")
        else:
            # Preparar nota de renovaci√≥n
            renewal_note = (
                f"‚ö†Ô∏è *Esta {payment_type_name} se renovar√° autom√°ticamente* ‚óù(·µî·µï·µî)‚óú\n"
                f"Puedes cancelarla en cualquier momento desde tu cuenta de PayPal, as√≠ que rel√°jate üçµ"
            ) if is_recurring else (
                f"‚ö†Ô∏è *Este es un {payment_type_name}.* Tu acceso estar√° activo hasta el {end_date.strftime('%d/%m/%Y')}~\n"
                f"Cuando termine, deber√°s hacer un nuevo pago si quieres seguir disfrutando del grupo VIP ‚ô™"
            )
            
            # Confirmation message text with the link
            confirmation_text = (
                f"üéüÔ∏è *¬°{payment_type_name.capitalize()} VIP Confirmada! (À∂·µî ·µï ·µîÀ∂)*\n\n"
                "Yay~ Aqu√≠ tienes tu entrada especial al grupo VIP ‚Çç^. .^‚Çé‚üÜ\n\n"
                f"üíå [‚ÄãENTRADA AL GRUPO VIP]({invite_link})\n\n"
                f"{renewal_note}\n\n"
                f"üìÜ Tu acceso actual expirar√° el: {end_date.strftime('%d/%m/%Y')}\n\n"
                f"‚ö†Ô∏è *Nota: Esta entrada es √∫nica, personal e intransferible. Expira en {INVITE_LINK_EXPIRY_HOURS} horas o tras un solo uso.*\n\n"
                "*Si sales del grupo por accidente y el enlace ya expir√≥, no te preocupes~ Usa el comando /recover y te dar√© otra entrada~ üíå*"
            )
            
            # Modificaci√≥n: Enviar la imagen junto con el mensaje
            try:
                # Primero borrar el mensaje provisional
                bot.delete_message(
                    chat_id=user_id,
                    message_id=provisional_message.message_id
                )
                
                # Enviar la imagen con el texto de confirmaci√≥n
                bot.send_photo(
                    chat_id=user_id,
                    photo=open('image1.jpeg', 'rb'),
                    caption=confirmation_text,
                    parse_mode='Markdown'
                )
            except Exception as img_error:
                logger.error(f"Error al enviar imagen: {str(img_error)}")
                # Si hay error al enviar la imagen, enviar un NUEVO mensaje en lugar de editar el borrado
                bot.send_message(
                    chat_id=user_id,
                    text=confirmation_text,
                    parse_mode='Markdown',
                    disable_web_page_preview=True
                )
        
        # Notificar administradores
        username_display = user.get('username', 'Sin username')
        first_name = user.get('first_name', '')
        last_name = user.get('last_name', '')
        full_name = f"{first_name} {last_name}".strip() or "Sin nombre"
        
        admin_notification = (
            f"üéâ *¬°Nuevo {payment_type_name.upper()}!*\n\n"
            "Detalles:\n"
            f"‚Ä¢ ID pago: {payment_id}\n"
            f"‚Ä¢ Usuario: {username_display} (@{username_display}) (id{user_id})\n"
            f"‚Ä¢ Nombre: {full_name}\n"
            f"‚Ä¢ Plan: {plan['display_name']}\n"
            f"‚Ä¢ Facturaci√≥n: ${plan['price_usd']:.2f} / "
            f"{'1 semana' if plan_id == 'weekly' else '1 mes'}\n"
            f"‚Ä¢ Tipo: {payment_type_name.upper()}\n"
            f"‚Ä¢ Renovaci√≥n: {'Autom√°tica' if is_recurring else 'No renovable (pago √∫nico)'}\n"
            f"‚Ä¢ Fecha: {start_date.strftime('%d %b %Y %I:%M %p')}\n"
            f"‚Ä¢ Expira: {end_date.strftime('%d %b %Y')}\n"
            f"‚Ä¢ Estado: ‚úÖ ACTIVO\n"
            f"‚Ä¢ Enlace: Generado correctamente"
        )
        
        for admin_id in ADMIN_IDS:
            try:
                bot.send_message(
                    chat_id=admin_id,
                    text=admin_notification,
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Error al notificar al admin {admin_id}: {str(e)}")
        
        logger.info(f"Pago exitoso procesado para usuario {user_id}, plan {plan_id}, tipo: {payment_type_name}")
        return True
        
    except Exception as e:
        logger.error(f"Error en process_successful_subscription: {str(e)}")
        return False

def process_failed_expulsions(bot):
    """
    Procesa los intentos fallidos de expulsi√≥n e intenta expulsar nuevamente a los usuarios
    Esta funci√≥n debe ejecutarse peri√≥dicamente para capturar posibles fallos durante expulsiones
    """
    try:
        import database as db
        
        logger.info("üîÑ Procesando intentos fallidos de expulsi√≥n...")
        
        # Obtener conexi√≥n a la base de datos
        conn = db.get_db_connection()
        cursor = conn.cursor()
        
        # Crear tabla si no existe para evitar errores
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS failed_expulsions (
            fail_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            reason TEXT,
            error_message TEXT,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            processed BOOLEAN DEFAULT 0
        )
        """)
        
        # Obtener fallos no procesados
        cursor.execute("""
        SELECT fail_id, user_id, reason, error_message, timestamp
        FROM failed_expulsions
        WHERE processed = 0
        ORDER BY timestamp ASC
        LIMIT 50
        """)
        
        failed_expulsions = cursor.fetchall()
        conn.close()
        
        if not failed_expulsions:
            logger.info("No hay intentos fallidos de expulsi√≥n pendientes")
            return 0
            
        logger.info(f"Encontrados {len(failed_expulsions)} intentos fallidos de expulsi√≥n")
        
        processed_count = 0
        success_count = 0
        
        for failed in failed_expulsions:
            fail_id = failed[0]
            user_id = failed[1]
            reason = failed[2]
            error_message = failed[3]
            timestamp = failed[4]
            
            logger.info(f"Procesando fallo ID {fail_id} - Usuario {user_id} - Raz√≥n: {reason}")
            
            # Verificar si el usuario a√∫n deber√≠a ser expulsado
            if db.has_valid_subscription(user_id):
                logger.info(f"Usuario {user_id} ahora tiene una suscripci√≥n v√°lida. Omitiendo expulsi√≥n.")
                db.mark_failed_expulsion_processed(fail_id)
                processed_count += 1
                continue
                
            # Verificar si es administrador
            from config import ADMIN_IDS
            if user_id in ADMIN_IDS:
                logger.info(f"Usuario {user_id} es administrador. Omitiendo expulsi√≥n.")
                db.mark_failed_expulsion_processed(fail_id)
                processed_count += 1
                continue
                
            # Intentar expulsar al usuario
            try:
                from config import GROUP_CHAT_ID
                
                if not GROUP_CHAT_ID:
                    logger.error("GROUP_CHAT_ID no est√° configurado")
                    continue
                
                # Verificar si el usuario est√° en el grupo
                try:
                    chat_member = bot.get_chat_member(GROUP_CHAT_ID, user_id)
                    
                    # Si ya no est√° en el grupo, marcar como procesado
                    if chat_member.status in ['left', 'kicked']:
                        logger.info(f"Usuario {user_id} ya no est√° en el grupo")
                        db.mark_failed_expulsion_processed(fail_id)
                        processed_count += 1
                        continue
                        
                except Exception as e:
                    if "user not found" in str(e).lower():
                        logger.info(f"Usuario {user_id} no encontrado en el grupo")
                        db.mark_failed_expulsion_processed(fail_id)
                        processed_count += 1
                        continue
                    else:
                        logger.error(f"Error al verificar miembro: {e}")
                        continue
                
                # Intentar expulsar al usuario
                logger.info(f"Reintentando expulsi√≥n de usuario {user_id} desde fallo {fail_id}")
                
                # Expulsar usuario
                bot.ban_chat_member(
                    chat_id=GROUP_CHAT_ID,
                    user_id=user_id,
                    revoke_messages=False
                )
                
                # Desbanear para permitir reingreso futuro
                bot.unban_chat_member(
                    chat_id=GROUP_CHAT_ID,
                    user_id=user_id,
                    only_if_banned=True
                )
                
                # Registrar expulsi√≥n exitosa
                db.record_expulsion(user_id, f"Reintento exitoso - Fallo original: {reason}")
                
                # Marcar fallo como procesado
                db.mark_failed_expulsion_processed(fail_id)
                
                processed_count += 1
                success_count += 1
                
                logger.info(f"‚úÖ Expulsi√≥n de usuario {user_id} exitosa en reintento (fallo {fail_id})")
                
                # Notificar al usuario
                try:
                    bot.send_message(
                        chat_id=user_id,
                        text=(
                            "‚ùå *Tu suscripci√≥n ha expirado o ha sido cancelada* \n\n"
                            "Has sido removido del Grupo VIP. Para recuperar acceso, adquiere una nueva suscripci√≥n "
                            "usando el comando /start para ver nuestros planes disponibles."
                        ),
                        parse_mode='Markdown'
                    )
                except Exception as notify_error:
                    logger.error(f"Error al notificar al usuario {user_id}: {notify_error}")
                
            except Exception as e:
                logger.error(f"Error al procesar fallo de expulsi√≥n {fail_id}: {e}")
        
        logger.info(f"Procesamiento de fallos completado: {processed_count} procesados, {success_count} exitosos")
        return success_count
        
    except Exception as e:
        logger.error(f"Error general al procesar fallos de expulsi√≥n: {e}")
        return -1

def update_subscription_from_webhook(bot, event_data):
    """
    Actualiza la suscripci√≥n en la base de datos seg√∫n el evento de webhook de PayPal
    
    Args:
        bot: Instancia del bot de Telegram
        event_data (dict): Datos del evento recibido de PayPal
        
    Returns:
        bool: True si se proces√≥ correctamente, False en caso de error
    """
    try:
        import logging
        import database as db
        import datetime
        from config import PLANS, ADMIN_IDS
        
        logger = logging.getLogger(__name__)
        
        event_type = event_data.get("event_type")
        resource = event_data.get("resource", {})
        
        # Obtener ID de suscripci√≥n o pago
        subscription_id = resource.get("id")
        if not subscription_id and 'billing_agreement_id' in resource:
            subscription_id = resource.get("billing_agreement_id")
        
        if not subscription_id:
            logger.error("Evento de webhook sin ID de suscripci√≥n")
            return False
        
        # Obtener la suscripci√≥n de la base de datos
        subscription = db.get_subscription_by_paypal_id(subscription_id)
        if not subscription:
            logger.error(f"Suscripci√≥n no encontrada para PayPal ID: {subscription_id}")
            return False
        
        sub_id = subscription['sub_id']
        user_id = subscription['user_id']
        
        # Manejar los diferentes tipos de eventos
        if event_type == "BILLING.SUBSCRIPTION.ACTIVATED":
            # Marcar la suscripci√≥n como activa
            db.update_subscription_status(sub_id, "ACTIVE")
            logger.info(f"Suscripci√≥n {sub_id} activada")
            
        elif event_type == "BILLING.SUBSCRIPTION.UPDATED":
            # Verificar si hay cambios en la fecha de expiraci√≥n
            # Esto depender√° de la estructura exacta del evento
            logger.info(f"Suscripci√≥n {sub_id} actualizada en PayPal")
            
        elif event_type == "BILLING.SUBSCRIPTION.CANCELLED":
            # Marcar la suscripci√≥n como cancelada
            db.update_subscription_status(sub_id, "CANCELLED")
            
            # Notificar al usuario
            try:
                bot.send_message(
                    chat_id=user_id,
                    text=(
                        "üíî *¬°Oh no! Tu suscripci√≥n ha sido cancelada* (ÔΩ°‚Ä¢ÃÅÔ∏ø‚Ä¢ÃÄÔΩ°)\n\n"
                        "Has sido removido del Grupo VIP... Te vamos a extra√±ar mucho (ÔΩ°T œâ TÔΩ°)\n\n"
                        "Si quieres regresar y ser parte otra vez del Grupo VIP, "
                        "usa el comando /start para ver los planes disponibles ‚ú®üíå\n"
                    ),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Error al notificar cancelaci√≥n al usuario {user_id}: {str(e)}")
            
            # A√ëADIR ESTE BLOQUE: Expulsar al usuario del grupo inmediatamente
            try:
                from config import GROUP_CHAT_ID
                if GROUP_CHAT_ID:
                    # Intentar expulsar al usuario (con reintentos)
                    max_retries = 3
                    for attempt in range(max_retries):
                        try:
                            logger.info(f"Expulsando a usuario {user_id} por cancelaci√≥n de suscripci√≥n (intento {attempt+1}/{max_retries})")
                            
                            # Expulsar al usuario
                            bot.ban_chat_member(
                                chat_id=GROUP_CHAT_ID,
                                user_id=user_id,
                                revoke_messages=False
                            )
                            
                            # Desbanear inmediatamente para permitir reingreso futuro
                            bot.unban_chat_member(
                                chat_id=GROUP_CHAT_ID,
                                user_id=user_id,
                                only_if_banned=True
                            )
                            
                            # Registrar la expulsi√≥n
                            db.record_expulsion(user_id, "Cancelaci√≥n de suscripci√≥n")
                            logger.info(f"Usuario {user_id} expulsado exitosamente por cancelaci√≥n")
                            break
                        except Exception as exp_error:
                            logger.error(f"Error al expulsar usuario {user_id} (intento {attempt+1}): {exp_error}")
                            if attempt < max_retries - 1:
                                time.sleep(2)  # Esperar antes de reintentar
            except Exception as e:
                logger.error(f"Error general al intentar expulsar al usuario {user_id}: {str(e)}")
            
            logger.info(f"Suscripci√≥n {sub_id} cancelada")
            
        elif event_type == "BILLING.SUBSCRIPTION.SUSPENDED":
            # Marcar la suscripci√≥n como suspendida
            db.update_subscription_status(sub_id, "SUSPENDED")
            
            # Notificar al usuario
            try:
                bot.send_message(
                    chat_id=user_id,
                    text=(
                        "‚ö†Ô∏è *Tu suscripci√≥n ha sido suspendida*\n\n"
                        "Tu acceso al grupo VIP puede verse afectado. Por favor, verifica tu m√©todo de pago "
                        "en PayPal para reactivar tu suscripci√≥n."
                    ),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Error al notificar suspensi√≥n al usuario {user_id}: {str(e)}")
            
            logger.info(f"Suscripci√≥n {sub_id} suspendida")
            
        elif event_type == "BILLING.SUBSCRIPTION.PAYMENT.FAILED":
            # Notificar al usuario sobre el pago fallido
            try:
                bot.send_message(
                    chat_id=user_id,
                    text=(
                        "‚ö†Ô∏è *Pago fallido*\n\n"
                        "No pudimos procesar el pago de tu suscripci√≥n. Por favor, verifica tu m√©todo de pago "
                        "en PayPal para evitar la cancelaci√≥n de tu acceso al grupo VIP."
                    ),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Error al notificar pago fallido al usuario {user_id}: {str(e)}")
            
            logger.info(f"Pago fallido para suscripci√≥n {sub_id}")
            
        elif event_type == "PAYMENT.SALE.COMPLETED":
            # Un pago fue completado exitosamente (renovaci√≥n)
            plan_id = subscription['plan']
            plan = PLANS.get(plan_id)
            
            if not plan:
                logger.error(f"Plan no encontrado para suscripci√≥n {sub_id}")
                return False
            
            # SOLUCI√ìN: Verificar si es una suscripci√≥n nueva o una renovaci√≥n
            start_date = datetime.datetime.fromisoformat(subscription['start_date'])
            now = datetime.datetime.now(datetime.timezone.utc)
            time_difference = (now - start_date).total_seconds()
            
            # Calcular nueva fecha de expiraci√≥n
            current_end_date = datetime.datetime.fromisoformat(subscription['end_date'])
            
            # MODIFICACI√ìN: Verificar si la suscripci√≥n ya ha vencido
            if current_end_date < now:
                # La suscripci√≥n ya venci√≥, calcular desde hoy
                logger.info(f"Suscripci√≥n {sub_id} ya venci√≥. Calculando nueva fecha desde hoy.")
                new_end_date = now + datetime.timedelta(days=plan['duration_days'])
            else:
                # La suscripci√≥n a√∫n est√° activa, extender desde la fecha actual de vencimiento
                new_end_date = current_end_date + datetime.timedelta(days=plan['duration_days'])
            
            # Extender la suscripci√≥n
            db.extend_subscription(sub_id, new_end_date)
            
            # NUEVO: Registrar la renovaci√≥n en el historial
            try:
                # Obtener datos de pago adicionales
                payment_id = resource.get("id") 
                amount = resource.get("amount", {}).get("total", plan['price_usd'])
                
                # Guardar en historial
                db.record_subscription_renewal(
                    sub_id, 
                    user_id,
                    plan_id,
                    float(amount),
                    current_end_date,
                    new_end_date,
                    payment_id,
                    "COMPLETED"
                )
            except Exception as e:
                logger.error(f"Error al registrar renovaci√≥n en historial: {e}")
            
            # Notificar al usuario SOLO si no es una suscripci√≥n nueva
            if time_difference > 300:  # 5 minutos en segundos
                try:
                    # Importar funci√≥n para notificar renovaci√≥n exitosa
                    import payments as pay
                    
                    # Notificar al usuario
                    pay.notify_successful_renewal(bot, user_id, subscription, new_end_date)
                    
                except Exception as e:
                    logger.error(f"Error al notificar renovaci√≥n al usuario {user_id}: {str(e)}")
            else:
                logger.info(f"Nueva suscripci√≥n detectada para usuario {user_id}, omitiendo notificaci√≥n de renovaci√≥n")
            
            logger.info(f"Suscripci√≥n {sub_id} renovada hasta {new_end_date}")
            
            # Notificar a los administradores
            for admin_id in ADMIN_IDS:
                try:
                    # Obtener informaci√≥n del usuario para el mensaje personalizado
                    user_info = db.get_user(user_id)
                    username = user_info.get('username', 'Sin username') if user_info else 'Desconocido'
                    
                    # Determinar si es renovaci√≥n o nueva suscripci√≥n para el mensaje al admin
                    message_type = "Renovaci√≥n autom√°tica" if time_difference > 300 else "Nueva suscripci√≥n"
                    
                    bot.send_message(
                        chat_id=admin_id,
                        text=(
                            f"üí∞ *{message_type} exitosa*\n\n"
                            f"Usuario: {username} (ID: {user_id})\n"
                            f"Plan: {plan.get('display_name', plan_id)}\n"
                            f"Monto: ${float(amount) if 'amount' in locals() else plan['price_usd']:.2f} USD\n"
                            f"{'Nueva fecha de expiraci√≥n' if time_difference > 300 else 'Fecha de expiraci√≥n'}: {new_end_date.strftime('%d/%m/%Y')}"
                        ),
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"Error al notificar {'renovaci√≥n' if time_difference > 300 else 'suscripci√≥n'} a admin {admin_id}: {str(e)}")
                
        return True
        
    except Exception as e:
        logger.error(f"Error en update_subscription_from_webhook: {str(e)}")
        return False

# Handlers de Telegram
def create_main_menu_markup():
    """Crea los botones para el men√∫ principal"""
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("üì¶ Ver Planes", callback_data="view_plans"),
        types.InlineKeyboardButton("üß† Cr√©ditos del Bot", callback_data="bot_credits"),
        types.InlineKeyboardButton("üìú T√©rminos de Uso", callback_data="terms")
    )
    return markup

def verify_subscription_with_paypal(subscription):
    """
    Verifica el estado real de una suscripci√≥n directamente con PayPal
    
    Args:
        subscription (dict): Datos de la suscripci√≥n en la base de datos
        
    Returns:
        dict: Resultado de la verificaci√≥n con claves:
            - is_valid (bool): Si la suscripci√≥n est√° activa seg√∫n PayPal
            - status (str): Estado devuelto por PayPal
            - error (str, opcional): Mensaje de error si hubo problemas
    """
    try:
        import payments as pay
        import logging
        logger = logging.getLogger(__name__)
        
        paypal_sub_id = subscription.get('paypal_sub_id')
        
        # Si no tiene ID de PayPal, es una suscripci√≥n manual (whitelist)
        if not paypal_sub_id:
            return {
                'is_valid': subscription.get('status') == 'ACTIVE',
                'status': subscription.get('status'),
                'is_whitelist': True
            }
        
        # Verificar con PayPal
        logger.info(f"Verificando suscripci√≥n {paypal_sub_id} directamente con PayPal")
        paypal_details = pay.verify_subscription(paypal_sub_id)
        
        if not paypal_details:
            return {
                'is_valid': False,
                'status': 'ERROR',
                'error': 'No se pudo verificar con PayPal'
            }
        
        paypal_status = paypal_details.get('status')
        
        # Determinar si es v√°lida seg√∫n su estado en PayPal
        is_valid = paypal_status in ['ACTIVE', 'APPROVED']
        
        # Actualizar estado en la base de datos si hay discrepancia
        if is_valid and subscription.get('status') != 'ACTIVE':
            import database as db
            logger.info(f"Actualizando estado local de suscripci√≥n {subscription['sub_id']} a ACTIVE desde {subscription['status']}")
            db.update_subscription_status(subscription['sub_id'], 'ACTIVE')
        elif not is_valid and subscription.get('status') == 'ACTIVE':
            import database as db
            logger.info(f"Actualizando estado local de suscripci√≥n {subscription['sub_id']} a {paypal_status} desde ACTIVE")
            db.update_subscription_status(subscription['sub_id'], 'CANCELLED' if paypal_status == 'CANCELLED' else 'EXPIRED')
        
        return {
            'is_valid': is_valid,
            'status': paypal_status,
            'paypal_data': paypal_details
        }
        
    except Exception as e:
        logger.error(f"Error al verificar suscripci√≥n con PayPal: {str(e)}")
        return {
            'is_valid': False,
            'status': 'ERROR',
            'error': str(e)
        }

def create_plans_markup():
    """
    Crea din√°micamente el markup de botones para los planes
    basado en la configuraci√≥n de PLANS
    """
    markup = types.InlineKeyboardMarkup()
    
    # A√±adir bot√≥n de tutorial primero
    markup.add(types.InlineKeyboardButton("üé• Tutorial de Pagos", callback_data="tutorial"))
    
    # Ordenar planes por 'order'
    sorted_plans = sorted(PLANS.items(), key=lambda x: x[1].get('order', 999))
    
    # Agrupar planes por filas
    rows = {}
    for plan_id, plan in sorted_plans:
        row_num = plan.get('row', 1)
        if row_num not in rows:
            rows[row_num] = []
        
        # Crear bot√≥n para el plan
        button_text = f"{plan.get('button_emoji', 'üì¶')} {plan.get('button_text', plan['name'])}"
        callback_data = f"{plan_id}_plan"
        
        # A√±adir bot√≥n a la fila correspondiente
        rows[row_num].append(types.InlineKeyboardButton(button_text, callback_data=callback_data))
    
    # A√±adir filas al markup en orden
    for row_num in sorted(rows.keys()):
        markup.add(*rows[row_num])  # Desempaquetar la lista de botones
    
    # A√±adir bot√≥n de volver
    markup.add(types.InlineKeyboardButton("üîô Atr√°s", callback_data="back_to_main"))
    
    return markup

def get_plan_from_callback(callback_data):
    """
    Extrae el ID del plan desde el callback_data
    Ejemplo: "weekly_plan" -> "weekly"
    """
    if "_plan" in callback_data:
        return callback_data.split("_")[0]
    return None

def perform_group_security_check(bot, group_id, expired_subscriptions=None):
    """Realiza verificaci√≥n de seguridad y expulsa usuarios no autorizados"""
    try:
        global processed_cancelled_subs, last_cleanup_time
        start_time = datetime.datetime.now()
        logger.info(f"üõ°Ô∏è INICIANDO VERIFICACI√ìN DE SEGURIDAD DEL GRUPO en {start_time}")
        
        # Limpieza peri√≥dica del conjunto (cada 24 horas)
        if not 'last_cleanup_time' in globals() or (start_time - last_cleanup_time).total_seconds() > 86400:  # 24 horas
            processed_cancelled_subs = set()
            last_cleanup_time = start_time
            logger.info("Conjunto de suscripciones canceladas procesadas limpiado")
        
        # PASO 1: Verificar permisos del bot en el grupo
        try:
            bot_info = bot.get_chat_member(group_id, bot.get_me().id)
            logger.info(f"Bot status en grupo: {bot_info.status}")
            logger.info(f"Can restrict members: {getattr(bot_info, 'can_restrict_members', False)}")
            
            if bot_info.status not in ['administrator', 'creator']:
                logger.error(f"‚ö†Ô∏è CR√çTICO: El bot no tiene permisos de administrador en el grupo {group_id}")
                return False
                
            if not getattr(bot_info, 'can_restrict_members', False):
                logger.error(f"‚ö†Ô∏è CR√çTICO: El bot no tiene permisos para expulsar miembros en el grupo {group_id}")
                return False
                
            logger.info(f"‚úÖ Permisos del bot verificados: {bot_info.status}, puede expulsar: {getattr(bot_info, 'can_restrict_members', False)}")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è CR√çTICO: Error al verificar permisos del bot: {e}")
            return False
        
        # PASO 2: Si no hay suscripciones expiradas proporcionadas, obtenerlas con FORCE=False
        # Cambiamos el valor force de True a False para evitar expulsar usuarios con suscripciones a√∫n activas
        if expired_subscriptions is None:
            logger.info("Obteniendo suscripciones expiradas de la base de datos...")
            expired_subscriptions = db.check_and_update_subscriptions(force=False)
            
        # Filtrar suscripciones ya procesadas
        filtered_subs = []
        for sub_data in expired_subscriptions:
            user_id, sub_id, plan = sub_data
            
            # Si es una suscripci√≥n cancelada y ya fue procesada, omitirla
            subscription = db.get_subscription_info(sub_id)
            if subscription and subscription.get('status') == 'CANCELLED' and sub_id in processed_cancelled_subs:
                logger.info(f"Omitiendo suscripci√≥n cancelada {sub_id} de usuario {user_id} - ya procesada")
                continue
                
            filtered_subs.append(sub_data)
        
        expired_subscriptions = filtered_subs
        
        # PASO 3: Procesar suscripciones expiradas
        total_count = len(expired_subscriptions)
        logger.info(f"Procesando {total_count} suscripciones expiradas")
        
        if not expired_subscriptions:
            logger.info("No hay suscripciones expiradas que procesar")
            return True
        
        # Contadores para estad√≠sticas
        processed = 0
        success = 0
        errors = 0
        skipped = 0
        
        # PASO 4: Procesar cada usuario con suscripci√≥n expirada
        for user_data in expired_subscriptions:
            processed += 1
            user_id, sub_id, plan = user_data
            
            # Excluir administradores
            if user_id in ADMIN_IDS:
                logger.info(f"Ignorando admin {user_id}")
                skipped += 1
                continue
            
            # VERIFICACI√ìN EXTRA: Confirmar que el usuario no tiene ninguna suscripci√≥n activa
            # Esta verificaci√≥n adicional evita expulsar usuarios que pueden tener otra suscripci√≥n activa
            if db.has_valid_subscription(user_id):
                logger.info(f"Usuario {user_id} tiene otra suscripci√≥n activa. Omitiendo expulsi√≥n.")
                skipped += 1
                continue

            # Obtener informaci√≥n completa de la suscripci√≥n
            subscription = db.get_subscription_info(sub_id)
            
            # Verificar el estado real en PayPal (para suscripciones recurrentes)
            if plan and subscription and subscription.get('is_recurring') and subscription.get('paypal_sub_id'):
                paypal_verification = verify_subscription_with_paypal(subscription)
                logger.info(f"Verificaci√≥n PayPal para suscripci√≥n {sub_id}: {paypal_verification}")
                
                # Si PayPal dice que NO es v√°lida, pero nuestro sistema dice que S√ç lo es
                if not paypal_verification.get('is_valid') and subscription.get('status') == 'ACTIVE':
                    logger.warning(f"Discrepancia detectada: Suscripci√≥n {sub_id} aparece como ACTIVE en sistema pero PayPal dice {paypal_verification.get('status')}")
                    
                    # Actualizar estado en base de datos
                    db.update_subscription_status(sub_id, 'CANCELLED' if paypal_verification.get('status') == 'CANCELLED' else 'EXPIRED')
                    logger.info(f"Estado de suscripci√≥n {sub_id} actualizado a {paypal_verification.get('status')}")
            
            is_whitelist = db.is_whitelist_subscription(sub_id)
            sub_type = "Whitelist" if is_whitelist else "Pagada"
            
            logger.info(f"PROCESANDO: Usuario {user_id}, SubID {sub_id}, Plan {plan}, Tipo {sub_type}")
            
            # Implementaci√≥n de reintentos (hasta 3 veces)
            max_retries = 3
            retry_count = 0
            retry_delay = 2  # segundos
            
            while retry_count < max_retries:
                try:
                    # Verificar si el usuario est√° en el grupo
                    try:
                        logger.info(f"Verificando si usuario {user_id} est√° en el grupo {group_id}")
                        chat_member = bot.get_chat_member(group_id, user_id)
                        logger.info(f"Estado del usuario {user_id} en el grupo: {chat_member.status}")
                        
                        # Si ya no est√° en el grupo, omitir
                        if chat_member.status in ['left', 'kicked']:
                            logger.info(f"Usuario {user_id} ya no est√° en el grupo. Omitiendo.")
                            skipped += 1
                            
                            # Marcar la suscripci√≥n cancelada como procesada
                            if subscription and subscription.get('status') == 'CANCELLED':
                                processed_cancelled_subs.add(sub_id)
                                logger.info(f"Suscripci√≥n cancelada {sub_id} marcada como procesada")
                            
                            break  # Salir del bucle de reintentos
                        
                        # PASO 5: EXPULSAR AL USUARIO
                        logger.info(f"üî¥ EXPULSANDO a usuario {user_id} por suscripci√≥n expirada (intento {retry_count+1}/{max_retries})...")
                        
                        # Nueva estrategia de expulsi√≥n m√°s robusta
                        try:
                            # Intentar con kick_chat_member o ban_chat_member seg√∫n disponibilidad
                            try:
                                # M√©todo 1: ban_chat_member (nuevo m√©todo recomendado)
                                logger.info(f"Intentando ban_chat_member para usuario {user_id}...")
                                
                                # Usar un bloque try para evitar que errores paren el proceso
                                try:
                                    # Primero intentar desalojar al usuario
                                    bot.ban_chat_member(
                                        chat_id=group_id,
                                        user_id=user_id,
                                        revoke_messages=False
                                    )
                                    logger.info(f"ban_chat_member ejecutado para usuario {user_id}")
                                except Exception as ban_error:
                                    logger.error(f"Error en ban_chat_member: {ban_error}")
                                    raise  # Re-lanzar la excepci√≥n para probar el m√©todo alternativo
                                
                                # Desbanear para permitir reingreso futuro (en otro bloque try)
                                try:
                                    bot.unban_chat_member(
                                        chat_id=group_id,
                                        user_id=user_id,
                                        only_if_banned=True
                                    )
                                    logger.info(f"unban_chat_member ejecutado para usuario {user_id}")
                                except Exception as unban_error:
                                    logger.error(f"Error en unban_chat_member (no cr√≠tico): {unban_error}")
                                    # No re-lanzar esta excepci√≥n, ya que el usuario ya fue expulsado
                                
                                # Si llegamos aqu√≠, la expulsi√≥n fue exitosa
                                success += 1
                                logger.info(f"‚úÖ Usuario {user_id} expulsado exitosamente")
                                
                                # Marcar la suscripci√≥n cancelada como procesada
                                if subscription and subscription.get('status') == 'CANCELLED':
                                    processed_cancelled_subs.add(sub_id)
                                    logger.info(f"Suscripci√≥n cancelada {sub_id} marcada como procesada")
                                
                            except Exception as ban_method_error:
                                # M√©todo 2: Si ban_chat_member falla, intentar con kick_chat_member
                                logger.warning(f"ban_chat_member fall√≥, intentando m√©todo alternativo kick_chat_member: {ban_method_error}")
                                
                                try:
                                    # Intentar el m√©todo alternativo
                                    bot.kick_chat_member(
                                        chat_id=group_id,
                                        user_id=user_id
                                    )
                                    logger.info(f"kick_chat_member ejecutado para usuario {user_id}")
                                    
                                    # Intentar desbanear (no cr√≠tico)
                                    try:
                                        bot.unban_chat_member(
                                            chat_id=group_id,
                                            user_id=user_id
                                        )
                                        logger.info(f"unban_chat_member ejecutado con m√©todo alternativo para usuario {user_id}")
                                    except Exception as alt_unban_error:
                                        logger.error(f"Error en unban_chat_member alternativo (no cr√≠tico): {alt_unban_error}")
                                    
                                    # Si llegamos aqu√≠, la expulsi√≥n alternativa fue exitosa
                                    success += 1
                                    logger.info(f"‚úÖ Usuario {user_id} expulsado con m√©todo alternativo")
                                    
                                    # Marcar la suscripci√≥n cancelada como procesada
                                    if subscription and subscription.get('status') == 'CANCELLED':
                                        processed_cancelled_subs.add(sub_id)
                                        logger.info(f"Suscripci√≥n cancelada {sub_id} marcada como procesada")
                                    
                                except Exception as kick_error:
                                    # Si ambos m√©todos fallan, registrar el error
                                    logger.error(f"‚ùå Ambos m√©todos de expulsi√≥n fallaron para usuario {user_id}: {kick_error}")
                                    raise  # Re-lanzar para que se maneje en el bloque catch principal
                            
                            # Registrar expulsi√≥n en la base de datos (solo si no hay excepciones)
                            db.record_expulsion(
                                user_id,
                                f"Expulsi√≥n autom√°tica - Plan: {plan}, Tipo: {sub_type}"
                            )
                            
                            # Notificar al usuario (no cr√≠tico)
                            try:
                                bot.send_message(
                                    chat_id=user_id,
                                    text=(
                                        f"‚ùå Tu suscripci√≥n ({sub_type}) ha expirado.\n\n"
                                        "Has sido expulsado del grupo VIP. Para recuperar el acceso, "
                                        "usa el comando /start para ver nuestros planes disponibles."
                                    )
                                )
                                logger.info(f"Notificaci√≥n enviada a usuario {user_id}")
                            except Exception as notify_error:
                                logger.error(f"No se pudo notificar al usuario {user_id} (no cr√≠tico): {notify_error}")
                            
                            # Si llegamos aqu√≠, todo el proceso fue exitoso
                            break  # Salir del bucle de reintentos
                            
                        except Exception as expulsion_error:
                            logger.error(f"‚ùå Error en el proceso de expulsi√≥n para usuario {user_id}: {expulsion_error}")
                            
                            # Incrementar el contador de reintentos
                            retry_count += 1
                            
                            if retry_count < max_retries:
                                logger.info(f"Reintentando expulsi√≥n ({retry_count}/{max_retries}) para usuario {user_id} en {retry_delay} segundos...")
                                time.sleep(retry_delay)
                            else:
                                logger.error(f"‚ùå Se agotaron los reintentos para expulsar al usuario {user_id}")
                                errors += 1
                        
                    except Exception as check_error:
                        if "user not found" in str(check_error).lower():
                            logger.info(f"Usuario {user_id} no encontrado en el grupo. Omitiendo.")
                            skipped += 1
                            
                            # Marcar la suscripci√≥n cancelada como procesada
                            if subscription and subscription.get('status') == 'CANCELLED':
                                processed_cancelled_subs.add(sub_id)
                                logger.info(f"Suscripci√≥n cancelada {sub_id} marcada como procesada")
                            
                            break  # Salir del bucle de reintentos
                        else:
                            logger.error(f"Error al verificar usuario {user_id} en el grupo: {check_error}")
                            
                            # Incrementar el contador de reintentos
                            retry_count += 1
                            
                            if retry_count < max_retries:
                                logger.info(f"Reintentando verificaci√≥n ({retry_count}/{max_retries}) para usuario {user_id} en {retry_delay} segundos...")
                                time.sleep(retry_delay)
                            else:
                                logger.error(f"‚ùå Se agotaron los reintentos para verificar al usuario {user_id}")
                                errors += 1
                    
                except Exception as cycle_error:
                    logger.error(f"Error general al procesar usuario {user_id}: {cycle_error}")
                    
                    # Incrementar el contador de reintentos
                    retry_count += 1
                    
                    if retry_count < max_retries:
                        logger.info(f"Reintentando procesamiento ({retry_count}/{max_retries}) para usuario {user_id} en {retry_delay} segundos...")
                        time.sleep(retry_delay)
                    else:
                        logger.error(f"‚ùå Se agotaron los reintentos para usuario {user_id}")
                        errors += 1
                        break  # Salir del bucle de reintentos
            
        # Estad√≠sticas finales
        end_time = datetime.datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        summary = f"""
        === RESUMEN DE VERIFICACI√ìN ===
        Duraci√≥n: {duration:.2f} segundos
        Procesados: {processed}/{total_count}
        Exitosos: {success}
        Omitidos: {skipped}
        Errores: {errors}
        ============================
        """
        
        logger.info(summary)
        
        # Si hay errores, pero tambi√©n hay √©xitos, consideramos que la operaci√≥n fue parcialmente exitosa
        if errors > 0 and success > 0:
            logger.warning("‚ö†Ô∏è Verificaci√≥n parcialmente exitosa (algunos usuarios no pudieron ser expulsados)")
            return True
        
        # Si no hay errores o todo son errores
        return errors == 0
        
    except Exception as e:
        logger.error(f"ERROR CR√çTICO en verificaci√≥n de seguridad: {e}")
        return False

def schedule_security_verification(bot):
    """Inicia el hilo de verificaci√≥n peri√≥dica de seguridad"""
    global security_thread_running
    
    if security_thread_running:
        logger.info("‚ö†Ô∏è Hilo de verificaci√≥n ya est√° en ejecuci√≥n. No se iniciar√° otro.")
        return None
    
    def security_check_thread():
        global security_thread_running
        security_thread_running = True
        verify_count = 0
        failures_count = 0
        max_failures = 3  # Permitir hasta 3 fallos consecutivos
        
        # Crear archivo de seguimiento para diagn√≥stico
        heartbeat_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'security_heartbeat.txt')
        
        try:
            os.makedirs(os.path.dirname(heartbeat_file), exist_ok=True)
            with open(heartbeat_file, 'w') as f:
                f.write(f"Hilo de seguridad iniciado: {datetime.datetime.now()}\n")
        except Exception as e:
            logger.error(f"No se pudo crear archivo de heartbeat: {e}")
        
        logger.info("üîê HILO DE SEGURIDAD INICIADO - Verificaci√≥n peri√≥dica activada")
        
        # Registro inicial de actividad del hilo
        try:
            for admin_id in ADMIN_IDS:
                try:
                    bot.send_message(
                        chat_id=admin_id,
                        text="üîê Sistema de seguridad activado: Se realizar√° verificaci√≥n peri√≥dica de suscripciones"
                    )
                except Exception:
                    pass  # Ignorar errores al notificar
        except Exception:
            pass  # Continuar incluso si los mensajes fallan
        
        # Intervalo de verificaci√≥n configurable (en segundos)
        check_interval = 60  
        
        # Contador de ciclos para determinar cu√°ndo procesar fallos de expulsi√≥n
        cycle_counter = 0
        
        while security_thread_running:
            try:
                verify_count += 1
                current_time = datetime.datetime.now()
                cycle_counter += 1
                
                # Actualizar archivo de heartbeat
                try:
                    with open(heartbeat_file, 'a') as f:
                        f.write(f"Verificaci√≥n #{verify_count}: {current_time}\n")
                except Exception:
                    pass  # No interrumpir el proceso si no se puede escribir el heartbeat
                
                logger.info(f"üîç VERIFICACI√ìN #{verify_count} INICIADA en {current_time}")
                
                # 1. Verificar permisos del bot primero
                try:
                    has_permissions = verify_bot_permissions(bot)
                    if not has_permissions:
                        logger.error("üö® El bot no tiene los permisos necesarios para expulsar usuarios")
                        # Enviar alerta a todos los administradores
                        for admin_id in ADMIN_IDS:
                            try:
                                bot.send_message(
                                    chat_id=admin_id, 
                                    text="üö® ALERTA DE SEGURIDAD: El bot no tiene permisos para realizar expulsiones autom√°ticas. Por favor, verifique los permisos del bot en el grupo."
                                )
                            except Exception:
                                pass  # Continuar incluso si los mensajes fallan
                except Exception as perm_error:
                    logger.error(f"Error al verificar permisos: {perm_error}")
                
                # 2. Verificar y obtener suscripciones expiradas en la BD
                try:
                    # Usamos FORCE=False para usar solo las suscripciones ya marcadas como expiradas
                    expired_subscriptions = db.check_and_update_subscriptions(force=True)
                    logger.info(f"Suscripciones expiradas encontradas: {len(expired_subscriptions)}")
                    
                    # 3. Si hay expiradas, expulsar usuarios
                    if expired_subscriptions:
                        logger.info(f"üö® EXPULSANDO {len(expired_subscriptions)} USUARIOS CON SUSCRIPCIONES EXPIRADAS")
                        
                        # Realizar expulsi√≥n de usuarios con suscripciones expiradas
                        if GROUP_CHAT_ID:
                            result = perform_group_security_check(
                                bot,
                                GROUP_CHAT_ID,
                                expired_subscriptions
                            )
                            
                            if result:
                                logger.info("‚úÖ Verificaci√≥n completada exitosamente")
                                failures_count = 0  # Reiniciar contador de fallos
                            else:
                                failures_count += 1
                                logger.error(f"‚ùå Verificaci√≥n fallida (intento #{failures_count})")
                                
                                # Si hay fallos consecutivos, notificar a los admins
                                if failures_count >= max_failures:
                                    for admin_id in ADMIN_IDS:
                                        try:
                                            bot.send_message(
                                                chat_id=admin_id,
                                                text=f"üö® ALERTA: Han ocurrido {failures_count} fallos consecutivos en el sistema de expulsi√≥n autom√°tica. Por favor, revise los registros."
                                            )
                                        except Exception:
                                            pass
                        else:
                            logger.error("‚ö†Ô∏è GROUP_CHAT_ID no est√° configurado. No se puede realizar expulsi√≥n autom√°tica.")
                    else:
                        logger.info("‚úÖ No hay suscripciones expiradas para procesar")
                        failures_count = 0  # Reiniciar contador de fallos
                        
                except Exception as exp_error:
                    failures_count += 1
                    logger.error(f"Error al verificar suscripciones expiradas: {exp_error}")
                
                # 4. Cada 10 ciclos, procesar fallos de expulsi√≥n previos
                if cycle_counter >= 10:
                    try:
                        logger.info("üîÑ Procesando fallos de expulsi√≥n pendientes...")
                        processed = process_failed_expulsions(bot)
                        if processed > 0:
                            logger.info(f"‚úÖ Procesados {processed} fallos de expulsi√≥n pendientes")
                        cycle_counter = 0  # Reiniciar contador
                    except Exception as fail_error:
                        logger.error(f"Error al procesar fallos de expulsi√≥n: {fail_error}")
                
                # Esperar antes de la pr√≥xima verificaci√≥n
                logger.info(f"Hilo de seguridad esperando {check_interval} segundos para pr√≥xima verificaci√≥n...")
                
                # Dividir el sleep en intervalos m√°s peque√±os para poder responder r√°pido a se√±ales de parada
                for _ in range(check_interval):
                    if not security_thread_running:
                        break
                    time.sleep(1)
                
            except Exception as cycle_error:
                failures_count += 1
                logger.error(f"üî• ERROR EN CICLO DE VERIFICACI√ìN: {cycle_error}")
                # En caso de error, esperar y continuar
                time.sleep(5)
                
                # Reiniciar el ciclo si hay demasiados fallos
                if failures_count >= 10:
                    logger.critical("üî• DEMASIADOS FALLOS CONSECUTIVOS. REINICIANDO EL CICLO DE VERIFICACI√ìN.")
                    # Notificar a los admins
                    for admin_id in ADMIN_IDS:
                        try:
                            bot.send_message(
                                chat_id=admin_id,
                                text="üö® ALERTA CR√çTICA: El sistema de seguridad ha detectado errores graves y est√° intentando recuperarse. Se recomienda revisar los logs."
                            )
                        except Exception:
                            pass
                    
                    # Reiniciar contadores
                    failures_count = 0
                    
                    # Guardar registro del reinicio
                    try:
                        with open(heartbeat_file, 'a') as f:
                            f.write(f"REINICIO DE EMERGENCIA: {datetime.datetime.now()}\n")
                    except Exception:
                        pass
        
        logger.warning("‚ö†Ô∏è HILO DE SEGURIDAD TERMINADO - La verificaci√≥n peri√≥dica se ha detenido")
        security_thread_running = False
        
        # Intentar reiniciar autom√°ticamente
        try:
            logger.info("üîÑ Intentando reiniciar el hilo de seguridad autom√°ticamente...")
            security_thread_running = False
            time.sleep(2)
            # Crear un nuevo hilo
            new_thread = threading.Thread(target=security_check_thread, daemon=True)
            new_thread.start()
            logger.info("‚úÖ Hilo de seguridad reiniciado autom√°ticamente")
        except Exception as restart_error:
            logger.critical(f"‚ùå No se pudo reiniciar el hilo de seguridad: {restart_error}")
            # Notificar a los admins
            for admin_id in ADMIN_IDS:
                try:
                    bot.send_message(
                        chat_id=admin_id,
                        text="üö® ALERTA CR√çTICA: El sistema de seguridad ha fallado y no se pudo reiniciar autom√°ticamente. Por favor, reinicie el bot."
                    )
                except Exception:
                    pass
    
    # Crear y arrancar hilo en modo daemon
    thread = threading.Thread(target=security_check_thread, daemon=True)
    thread.start()
    logger.info("‚úÖ Hilo de verificaci√≥n peri√≥dica iniciado en segundo plano")
    
    return thread

# A√±ade esta nueva funci√≥n al archivo:
def check_security_thread_status(bot):
    """
    Verifica el estado del hilo de seguridad y lo reinicia si es necesario.
    Esta funci√≥n debe llamarse peri√≥dicamente para garantizar que el hilo est√© activo.
    """
    global security_thread_running
    
    # Si el hilo no est√° ejecut√°ndose, reiniciarlo
    if not security_thread_running:
        logger.warning("‚ö†Ô∏è Hilo de seguridad no detectado. Iniciando uno nuevo...")
        
        # Esperar un momento por si el hilo est√° en proceso de inicializaci√≥n
        time.sleep(2)
        
        # Si a√∫n no est√° ejecut√°ndose, iniciar uno nuevo
        if not security_thread_running:
            new_thread = schedule_security_verification(bot)
            
            if new_thread:
                logger.info("‚úÖ Hilo de seguridad reiniciado exitosamente")
                
                # Notificar a los administradores
                for admin_id in ADMIN_IDS:
                    try:
                        bot.send_message(
                            chat_id=admin_id,
                            text="üîÑ El sistema de seguridad se ha reiniciado autom√°ticamente"
                        )
                    except Exception:
                        pass
                
                return True
            else:
                logger.error("‚ùå No se pudo reiniciar el hilo de seguridad")
                return False
    
    return True


# Modificaci√≥n 4: A√±adir una funci√≥n para forzar la expulsi√≥n inmediata de todos los usuarios con suscripciones expiradas
# A√±ade esta nueva funci√≥n al archivo:

def force_security_check(bot, specific_users=None):
    """
    Fuerza una verificaci√≥n de seguridad inmediata y expulsa a todos los usuarios con suscripciones expiradas.
    
    Args:
        bot: Instancia del bot
        specific_users: Lista opcional de IDs de usuarios para verificar espec√≠ficamente
    """
    try:
        logger.info("üîç Iniciando verificaci√≥n de seguridad forzada...")
        
        # Verificar los permisos primero
        has_permissions = verify_bot_permissions(bot)
        if not has_permissions:
            logger.error("‚ùå El bot no tiene los permisos necesarios para realizar expulsiones")
            return False
        
        # Forzar la actualizaci√≥n de suscripciones expiradas y canceladas
        expired_subscriptions = db.check_and_update_subscriptions(force=True)
        
        # Si se proporcionaron usuarios espec√≠ficos, filtrar para incluir solo esos usuarios
        if specific_users and len(specific_users) > 0:
            logger.info(f"Verificando espec√≠ficamente los usuarios: {specific_users}")
            expired_filtered = []
            for sub in expired_subscriptions:
                user_id, sub_id, plan = sub
                if user_id in specific_users:
                    expired_filtered.append(sub)
                    logger.info(f"Usuario {user_id} incluido en la verificaci√≥n espec√≠fica")
            
            # Si no hay ninguna suscripci√≥n expirada para los usuarios espec√≠ficos, buscar suscripciones canceladas
            if not expired_filtered:
                for user_id in specific_users:
                    # Obtener la √∫ltima suscripci√≥n del usuario
                    sub = db.get_subscription_by_user_id(user_id)
                    if sub and sub.get('status') == 'CANCELLED':
                        expired_filtered.append((user_id, sub.get('sub_id'), sub.get('plan')))
                        logger.info(f"A√±adiendo suscripci√≥n cancelada del usuario {user_id} a la verificaci√≥n espec√≠fica")
            
            # Usar la lista filtrada
            expired_subscriptions = expired_filtered
        else:
            # Filtrar suscripciones ya procesadas cuando no se trata de usuarios espec√≠ficos
            filtered_subs = []
            for sub_data in expired_subscriptions:
                user_id, sub_id, plan = sub_data
                
                # Si es una suscripci√≥n cancelada y ya fue procesada, omitirla
                subscription = db.get_subscription_info(sub_id)
                if subscription and subscription.get('status') == 'CANCELLED' and sub_id in processed_cancelled_subs:
                    logger.info(f"Omitiendo suscripci√≥n cancelada {sub_id} de usuario {user_id} - ya procesada")
                    continue
                    
                filtered_subs.append(sub_data)
            
            expired_subscriptions = filtered_subs
        
        if not expired_subscriptions:
            logger.info("‚úÖ No hay suscripciones expiradas que procesar")
            return True
        
        logger.info(f"Encontradas {len(expired_subscriptions)} suscripciones expiradas o canceladas")
        
        # Realizar expulsi√≥n de usuarios con suscripciones expiradas
        if GROUP_CHAT_ID:
            result = perform_group_security_check(bot, GROUP_CHAT_ID, expired_subscriptions)
            
            if result:
                logger.info("‚úÖ Verificaci√≥n forzada completada exitosamente")
                
                # Notificar a los administradores
                for admin_id in ADMIN_IDS:
                    try:
                        bot.send_message(
                            chat_id=admin_id,
                            text=f"‚úÖ Verificaci√≥n forzada completada: {len(expired_subscriptions)} suscripciones expiradas/canceladas procesadas"
                        )
                    except Exception:
                        pass
                
                return True
            else:
                logger.error("‚ùå Verificaci√≥n forzada fall√≥")
                return False
        else:
            logger.error("‚ùå GROUP_CHAT_ID no est√° configurado. No se puede realizar verificaci√≥n")
            return False
    
    except Exception as e:
        logger.error(f"Error en verificaci√≥n forzada: {e}")
        return False
    

    
def handle_force_expire(message, bot):
    """
    Comando de fuerza para verificar y expulsar usuarios con suscripciones expiradas
    Uso: /force_expire
    """
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # Verificar que sea un administrador
        if user_id not in ADMIN_IDS:
            return
            
        # Mensaje de estado
        status_message = bot.reply_to(
            message,
            "üîÑ Forzando verificaci√≥n y expulsi√≥n de suscripciones expiradas..."
        )
        
        # 1. Actualizar suscripciones expiradas en la BD
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=status_message.message_id,
            text="üîÑ Verificando suscripciones expiradas en la base de datos..."
        )
        
        expired_subscriptions = db.check_and_update_subscriptions()
        
        if not expired_subscriptions:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_message.message_id,
                text="‚úÖ No se encontraron suscripciones expiradas en la base de datos."
            )
            return
            
        # 2. Hay suscripciones expiradas, mostrar detalles
        users_detail = ""
        for idx, (user_id, sub_id, plan) in enumerate(expired_subscriptions[:10]):  # Mostrar los primeros 10
            is_whitelist = db.is_whitelist_subscription(sub_id)
            user_info = db.get_user(user_id)
            username = user_info.get('username', 'Sin username') if user_info else 'Desconocido'
            users_detail += f"{idx+1}. Usuario {user_id} (@{username}) - {plan} {'(Whitelist)' if is_whitelist else ''}\n"
        
        if len(expired_subscriptions) > 10:
            users_detail += f"... y {len(expired_subscriptions) - 10} m√°s\n"
            
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=status_message.message_id,
            text=f"üîç Se encontraron {len(expired_subscriptions)} suscripciones expiradas:\n\n{users_detail}\nüîÑ Procesando expulsiones..."
        )
        
        # 3. Realizar las expulsiones
        result = perform_group_security_check(bot, GROUP_CHAT_ID, expired_subscriptions)
        
        # 4. Mostrar resultado final
        if result:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_message.message_id,
                text=f"‚úÖ Verificaci√≥n forzada completada.\n\nSe procesaron {len(expired_subscriptions)} suscripciones expiradas.\n\nConsulta los logs para ver los detalles de cada usuario."
            )
        else:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_message.message_id,
                text=f"‚ö†Ô∏è Error al procesar la verificaci√≥n forzada.\n\nRevisa los logs del sistema para m√°s informaci√≥n."
            )
            
    except Exception as e:
        logger.error(f"Error en handle_force_expire: {str(e)}")
        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_message.message_id,
                text=f"‚ùå Error: {str(e)}"
            )
        except:
            bot.reply_to(message, f"‚ùå Error: {str(e)}")
    
def check_and_fix_bot_permissions(message, bot):
    """Verifica y corrige los permisos del bot en el grupo VIP"""
    try:
        user_id = message.from_user.id
        
        # Verificar que sea un administrador
        if user_id not in ADMIN_IDS:
            return
            
        from config import GROUP_CHAT_ID
        if not GROUP_CHAT_ID:
            bot.reply_to(message, "‚ùå Error: GROUP_CHAT_ID no est√° configurado")
            return
            
        # Obtener informaci√≥n del bot en el grupo
        try:
            bot_member = bot.get_chat_member(GROUP_CHAT_ID, bot.get_me().id)
            
            status_message = f"üìä Estado del bot en el grupo:\n"
            
            # Verificar si es administrador
            if bot_member.status not in ['administrator', 'creator']:
                status_message += "‚ùå El bot NO es administrador del grupo. Debe ser promovido a administrador.\n"
            else:
                status_message += "‚úÖ El bot es administrador del grupo.\n"
                
                # Verificar permisos espec√≠ficos
                if not getattr(bot_member, 'can_restrict_members', False):
                    status_message += "‚ùå El bot NO tiene permiso para expulsar usuarios. Este permiso es OBLIGATORIO.\n"
                else:
                    status_message += "‚úÖ El bot tiene permiso para expulsar usuarios.\n"
                    
                if not getattr(bot_member, 'can_invite_users', False):
                    status_message += "‚ö†Ô∏è El bot no tiene permiso para invitar usuarios (recomendado).\n"
                else:
                    status_message += "‚úÖ El bot tiene permiso para invitar usuarios.\n"
            
            # Enviar mensaje con el estado
            bot.reply_to(message, status_message)
            
        except Exception as e:
            bot.reply_to(message, f"‚ùå Error al verificar permisos: {str(e)}")
            
    except Exception as e:
        logger.error(f"Error en check_and_fix_bot_permissions: {str(e)}")

# 2. MEJORA DEL COMANDO /verify_all
# Reemplaza la funci√≥n handle_verify_all_members con esta versi√≥n mejorada:

# Esta funci√≥n ya existe en el c√≥digo pero aseg√∫rate de que est√© correctamente configurada
def handle_verify_all_members(message, bot):
    """
    Comando para verificar y expulsar manualmente a todos los miembros no autorizados del grupo
    """
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # Log para depuraci√≥n
        logger.info(f"Comando {message.text} recibido de usuario {user_id} en chat {chat_id}")
        
        # Verificar que sea un administrador
        if user_id not in ADMIN_IDS:
            logger.info(f"Usuario {user_id} intent√≥ usar {message.text} pero no es administrador")
            bot.reply_to(message, "‚ö†Ô∏è Este comando solo est√° disponible para administradores.")
            return
        
        # Verificar que el mensaje sea del grupo VIP o de un chat privado con el administrador
        from config import GROUP_CHAT_ID
        if str(chat_id) != str(GROUP_CHAT_ID) and message.chat.type != 'private':
            logger.info(f"Comando {message.text} usado en chat incorrecto {chat_id}")
            bot.reply_to(message, f"‚ö†Ô∏è Este comando solo funciona en el grupo VIP o en chat privado con el bot.")
            return
        
        # Si es en privado, usar el GROUP_CHAT_ID configurado
        target_group_id = GROUP_CHAT_ID if message.chat.type == 'private' else chat_id
        
        # Mensaje inicial
        status_message = bot.reply_to(message, "üîÑ Iniciando verificaci√≥n completa de todos los miembros del grupo...")
        
        # Iniciar verificaci√≥n en un hilo separado para no bloquear
        def verification_thread():
            try:
                # Realizar la verificaci√≥n
                result = perform_group_security_check(bot, target_group_id)
                
                # Actualizar mensaje de estado con el resultado
                if result:
                    bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=status_message.message_id,
                        text="‚úÖ Verificaci√≥n completada exitosamente. Todos los miembros no autorizados han sido expulsados."
                    )
                else:
                    bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=status_message.message_id,
                        text="‚ö†Ô∏è Hubo problemas durante la verificaci√≥n. Revisa los logs para m√°s detalles."
                    )
            except Exception as e:
                logger.error(f"Error en hilo de verificaci√≥n: {e}")
                try:
                    bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=status_message.message_id,
                        text=f"‚ùå Error durante la verificaci√≥n: {str(e)}"
                    )
                except:
                    pass
        
        # Iniciar hilo
        verify_thread = threading.Thread(target=verification_thread)
        verify_thread.daemon = True
        verify_thread.start()
        
    except Exception as e:
        logger.error(f"Error general en handle_verify_all_members: {e}")
        bot.reply_to(message, f"‚ùå Error al iniciar verificaci√≥n: {str(e)}")


# 3. FUNCI√ìN DE VERIFICACI√ìN DE PERMISOS DEL BOT
# A√±ade esta funci√≥n al archivo app.py, justo antes de set_webhook()

def verify_bot_permissions(bot):
    """Verifica que el bot tenga los permisos correctos en el grupo VIP"""
    try:
        from config import GROUP_CHAT_ID, ADMIN_IDS, BOT_TOKEN
        import requests
        import json
        
        if not GROUP_CHAT_ID:
            logger.warning("GROUP_CHAT_ID no est√° configurado, omitiendo verificaci√≥n de permisos")
            return False
        
        # Usar la API directamente para evitar circularidad de importaciones
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/getChatMember"
        params = {
            "chat_id": GROUP_CHAT_ID,
            "user_id": bot.get_me().id
        }
        
        response = requests.get(url, params=params)
        data = response.json()
        
        if not data.get("ok"):
            logger.error(f"Error al verificar permisos del bot: {data.get('description')}")
            for admin_id in ADMIN_IDS:
                requests.get(
                    f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
                    params={
                        "chat_id": admin_id,
                        "text": f"‚ö†Ô∏è ALERTA: El bot no puede acceder al grupo VIP (ID: {GROUP_CHAT_ID}).\n\nPor favor, a√±ada el bot al grupo y as√≠gnele permisos de administrador."
                    }
                )
            return False
        
        chat_member = data.get("result", {})
        status = chat_member.get("status")
        
        if status not in ["administrator", "creator"]:
            logger.error(f"El bot no es administrador en el grupo VIP. Status: {status}")
            for admin_id in ADMIN_IDS:
                requests.get(
                    f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
                    params={
                        "chat_id": admin_id,
                        "text": f"‚ö†Ô∏è ALERTA: El bot no es administrador en el grupo VIP (ID: {GROUP_CHAT_ID}).\n\nPara poder generar enlaces de invitaci√≥n √∫nicos y expulsar usuarios no autorizados, el bot debe ser administrador del grupo."
                    }
                )
            return False
        
        # Verificar permisos espec√≠ficos
        can_restrict = chat_member.get("can_restrict_members", False)
        can_invite = chat_member.get("can_invite_users", False)
        
        # Lista de mensajes de error para permisos faltantes
        permission_errors = []
        
        if not can_restrict:
            permission_errors.append("‚ùå NO tiene permiso para EXPULSAR USUARIOS")
        
        if not can_invite:
            permission_errors.append("‚ùå NO tiene permiso para INVITAR USUARIOS")
        
        if permission_errors:
            error_msg = f"‚ö†Ô∏è ALERTA: El bot es administrador pero le faltan permisos esenciales en el grupo VIP:\n\n" + "\n".join(permission_errors) + "\n\nPor favor, edite los permisos del bot y active estos permisos para que funcione correctamente."
            
            for admin_id in ADMIN_IDS:
                requests.get(
                    f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
                    params={
                        "chat_id": admin_id,
                        "text": error_msg
                    }
                )
            return False
        
        # Si llegamos aqu√≠, todos los permisos est√°n correctos
        logger.info(f"‚úÖ Permisos del bot verificados correctamente: {status}, can_restrict_members: {can_restrict}, can_invite_users: {can_invite}")
        return True
        
    except Exception as e:
        logger.error(f"Error al verificar permisos del bot: {e}")
        return False

def handle_new_chat_members(message, bot):
    """Maneja cuando nuevos miembros se unen al grupo"""
    try:
        from config import GROUP_CHAT_ID
        
        logger.info(f"Procesando nuevos miembros en el chat {message.chat.id}")
        
        # Verificar que sea el grupo VIP
        if str(message.chat.id) != str(GROUP_CHAT_ID):
            logger.info(f"Chat {message.chat.id} no es el grupo VIP ({GROUP_CHAT_ID}), ignorando")
            return
            
        # Obtener los nuevos miembros
        for new_member in message.new_chat_members:
            # Omitir si es el propio bot
            if new_member.id == bot.get_me().id:
                logger.info("El bot se uni√≥ al grupo, ignorando")
                continue
                
            # Verificar si el usuario tiene suscripci√≥n activa
            user_id = new_member.id
            username = new_member.username or f"User{user_id}"
            
            # Omitir administradores
            if user_id in ADMIN_IDS:
                logger.info(f"Administrador {username} (ID: {user_id}) se uni√≥ al grupo")
                continue
            
            # CAMBIO IMPORTANTE: Usar has_valid_subscription en lugar de get_active_subscription
            # Esto asegura que verificamos correctamente si la suscripci√≥n es v√°lida
            has_subscription = db.has_valid_subscription(user_id)
            
            if not has_subscription:
                # No tiene suscripci√≥n activa, expulsar
                logger.warning(f"‚ö†Ô∏è USUARIO SIN SUSCRIPCI√ìN DETECTADA: {user_id} (@{username})")
                
                try:
                    # Obtener informaci√≥n detallada para registro
                    subscription = db.get_subscription_by_user_id(user_id)
                    if subscription:
                        status = subscription.get('status', 'UNKNOWN')
                        end_date = subscription.get('end_date', 'UNKNOWN')
                        logger.warning(f"Suscripci√≥n encontrada pero no v√°lida: Status={status}, End Date={end_date}")
                    
                    # Enviar mensaje al grupo
                    bot.send_message(
                        chat_id=message.chat.id,
                        text=f"üõë SEGURIDAD: Usuario {new_member.first_name} (@{username}) no tiene suscripci√≥n activa y ser√° expulsado autom√°ticamente."
                    )
                    
                    # Expulsar al usuario
                    logger.info(f"Expulsando a usuario sin suscripci√≥n: {user_id}")
                    ban_result = bot.ban_chat_member(
                        chat_id=message.chat.id,
                        user_id=user_id
                    )
                    logger.info(f"Resultado de expulsi√≥n: {ban_result}")
                    
                    # Desbanear inmediatamente para permitir que vuelva a unirse si obtiene suscripci√≥n
                    unban_result = bot.unban_chat_member(
                        chat_id=message.chat.id,
                        user_id=user_id,
                        only_if_banned=True
                    )
                    logger.info(f"Resultado de desbaneo: {unban_result}")
                    
                    # Registrar la expulsi√≥n
                    db.record_expulsion(user_id, "Verificaci√≥n de nuevo miembro - Sin suscripci√≥n activa")
                    
                    # Enviar mensaje privado al usuario
                    try:
                        bot.send_message(
                            chat_id=user_id,
                            text = (
                                "‚ùå Has sido expulsado del grupito VIP („Å£- ‚Ä∏ ‚Äì œÇ)\n\n"
                                "Parece que no tienes una suscripci√≥n activa‚Ä¶\n\n"
                                "Para volver a unirte, puedes adquirir una suscripci√≥n en @VelvetSub_Bot usando el comando /start ‚ú®üéÄ\n"
                            )
                        )
                    except Exception as e:
                        logger.error(f"No se pudo enviar mensaje privado a {user_id}: {e}")
                    
                except Exception as e:
                    logger.error(f"Error al expulsar nuevo miembro no autorizado {user_id}: {e}")
            else:
                logger.info(f"Usuario {username} (ID: {user_id}) se uni√≥ al grupo con suscripci√≥n v√°lida")
    
    except Exception as e:
        logger.error(f"Error general en handle_new_chat_members: {str(e)}")

def handle_start(message, bot):
    """Maneja el comando /start"""
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name
        
        # Verificar si el usuario ya exist√≠a en la base de datos
        existing_user = db.get_user(user_id)
        is_new_user = existing_user is None
        
        # Guardar usuario en la base de datos
        db.save_user(user_id, username, first_name, last_name)
        
        # Enviar mensaje de bienvenida con botones
        welcome_text = (
            "üëã ¬°ùó¢ùóµùóÆùòÜùóºùòÇ~! „Éæ(‡πë‚ïπ‚ó°‚ïπ)Ôæâ ùó¶ùóºùòÜ ùóπùóÆ ùóΩùóºùóøùòÅùó≤ùóøùóÆ ùó±ùó≤ùóπ ùó¥ùóøùòÇùóΩùóº ùó©ùóúùó£\n\n"
            "Este grupo es un espacio exclusivo con contenido premium y acceso limitado.\n\n"
            "Estoy aqu√≠ para ayudarte a ingresar correctamente al grupo üí´\n\n"
            "Por favor, elige una opci√≥n para continuar üëá"
        )

        
        bot.send_message(
            chat_id=user_id,
            text=welcome_text,
            parse_mode='Markdown',
            reply_markup=create_main_menu_markup()
        )
        
        # Notificar a los administradores si es un usuario nuevo
        if is_new_user:
            user_display_name = f"{first_name or ''} {last_name or ''}".strip() or "Sin nombre"
            user_handle = f"@{username}" if username else "Sin username"
            
            admin_notification = (
                "üë§ *Nuevo Usuario Registrado*\n\n"
                f"‚Ä¢ ID: `{user_id}`\n"
                f"‚Ä¢ Nombre: {user_display_name}\n"
                f"‚Ä¢ Username: {user_handle}\n"
                f"‚Ä¢ Fecha: {datetime.datetime.now().strftime('%d/%m/%Y %H:%M')}"
            )
            
            # Enviar notificaci√≥n a todos los administradores
            for admin_id in ADMIN_IDS:
                try:
                    bot.send_message(
                        chat_id=admin_id,
                        text=admin_notification,
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"Error al notificar al admin {admin_id} sobre nuevo usuario: {str(e)}")
        
        logger.info(f"Usuario {user_id} ({username}) ha iniciado el bot. Nuevo usuario: {is_new_user}")
    
    except Exception as e:
        logger.error(f"Error en handle_start: {str(e)}")
        bot.send_message(
            chat_id=message.chat.id,
            text="‚ùå Ocurri√≥ un error. Por favor, intenta nuevamente m√°s tarde."
        )

def handle_main_menu_callback(call, bot):
    """Maneja los callbacks del men√∫ principal"""
    try:
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        
        if call.data == "view_plans":
            # Editar mensaje para mostrar planes
            show_plans(bot, chat_id, message_id)
            
        elif call.data == "bot_credits":
            # Mostrar cr√©ditos del bot
            credits_text = (
                "üß† *Cr√©ditos del Bot*\n\n"
                "Este bot fue desarrollado por el equipo de desarrollo VIP.\n\n"
                "¬© 2025 Todos los derechos reservados.\n\n"
                "Para contacto o soporte: @NuryOwO"
            )
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô Volver", callback_data="back_to_main"))
            
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=credits_text,
                parse_mode='Markdown',
                reply_markup=markup
            )
            
        elif call.data == "terms":
            # Mostrar t√©rminos de uso
            try:
                with open(os.path.join('static', 'terms.txt'), 'r', encoding='utf-8') as f:
                    terms_text = f.read()
            except:
                terms_text = (
                    "üìú *T√©rminos de Uso*\n\n"
                    "1. El contenido del grupo VIP es exclusivo para suscriptores.\n"
                    "2. No se permiten reembolsos una vez activada la suscripci√≥n.\n"
                    "3. Est√° prohibido compartir el enlace de invitaci√≥n.\n"
                    "4. No se permite redistribuir el contenido fuera del grupo.\n"
                    "5. El incumplimiento de estas normas resultar√° en expulsi√≥n sin reembolso.\n\n"
                    "Al suscribirte, aceptas estos t√©rminos."
                )
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô Volver", callback_data="back_to_main"))
            
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=terms_text,
                parse_mode='Markdown',
                reply_markup=markup
            )
        
        # Responder al callback para quitar el "reloj de espera" en el cliente
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"Error en handle_main_menu_callback: {str(e)}")
        try:
            bot.answer_callback_query(call.id, "‚ùå Ocurri√≥ un error. Intenta nuevamente.")
        except:
            pass

def show_plans(bot, chat_id, message_id=None):
    """
    Muestra los planes de suscripci√≥n disponibles de forma din√°mica
    """
    try:
        # Generar texto de planes din√°micamente
        plans_text = generate_plans_text()
        
        # Generar markup din√°micamente
        markup = create_plans_markup()
        
        if message_id:
            # Editar mensaje existente
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=plans_text,
                parse_mode='Markdown',
                reply_markup=markup
            )
        else:
            # Enviar nuevo mensaje
            bot.send_message(
                chat_id=chat_id,
                text=plans_text,
                parse_mode='Markdown',
                reply_markup=markup
            )
        
        logger.info(f"Se mostraron planes al usuario {chat_id}")
        
    except Exception as e:
        logger.error(f"Error en show_plans: {str(e)}")
        try:
            if message_id:
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text="‚ùå Ocurri√≥ un error al mostrar los planes. Por favor, intenta nuevamente con /start."
                )
            else:
                bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå Ocurri√≥ un error al mostrar los planes. Por favor, intenta nuevamente con /start."
                )
        except:
            pass

def show_plan_details(bot, chat_id, message_id, plan_id):
    """
    Muestra los detalles de un plan espec√≠fico de forma din√°mica
    basado en la configuraci√≥n
    """
    try:
        plan = PLANS.get(plan_id)
        if not plan:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="‚ùå Plan no encontrado. Por favor, intenta nuevamente."
            )
            return
        
        # Generate benefits text
        benefits_text = ""
        for benefit in plan.get('benefits', ['Acceso al grupo VIP']):
            benefits_text += f"‚úÖ {benefit}\n"
        
        # Get billing type based on duration
        if plan['duration_days'] >= 30:
            duration_type = "mensual"
        elif plan['duration_days'] >= 7:
            duration_type = "semanal"
        else:
            duration_type = "diaria"
        
        # Check if this plan overrides the global recurring setting
        plan_recurring = plan.get('recurring')
        is_recurring = RECURRING_PAYMENTS_ENABLED if plan_recurring is None else plan_recurring
        
        # Payment type text
        if is_recurring:
            payment_type_text = f"‚è≥ Facturaci√≥n: {duration_type} (recurrente)\n\n" + \
                                "_Este plan se renovar√° autom√°ticamente hasta que decidas cancelarlo, (À∂ÀÉ ·µï ÀÇÀ∂)~_"
        else:
            payment_type_text = f"üìÖ Duraci√≥n: {plan['duration_days']} d√≠as\n" + \
                                "Este es un pago √∫nico, sin renovaciones autom√°ticas. ¬°Sin compromisos!"
        
        # Construye el mensaje con los detalles del plan
        plan_text = (
            f"üì¶ {plan['display_name']}\n\n"
            f"{plan['description']}\n"
            f"‚ú® Beneficios incluidos:\n"
            f"{benefits_text}\n"
            f"üí∞ Precio: ${plan['price_usd']:.2f} USD\n"
            f"{payment_type_text}\n\n"
            f"Elige tu m√©todo de pago aqu√≠ abajo~ üëá"
        )
        
        # Create markup with payment buttons
        markup = types.InlineKeyboardMarkup(row_width=1)
        
        # Button text depends on payment type
        button_text = "Suscribirse con PayPal" if is_recurring else "Pagar con PayPal"
        
        markup.add(
            types.InlineKeyboardButton(f"üÖøÔ∏è {button_text}", callback_data=f"payment_paypal_{plan_id}"),
            types.InlineKeyboardButton("üîô Atr√°s", callback_data="view_plans")
        )
        
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=plan_text,
            parse_mode='Markdown',
            reply_markup=markup
        )
        
        logger.info(f"Usuario {chat_id} est√° viendo detalles del plan {plan_id}")
        
    except Exception as e:
        logger.error(f"Error en show_plan_details: {str(e)}")
        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="‚ùå Ocurri√≥ un error al mostrar los detalles del plan. Por favor, intenta nuevamente."
            )
        except:
            pass

def show_payment_tutorial(bot, chat_id, message_id):
    """Muestra el tutorial de pagos"""
    try:
        payment_type = "suscripciones" if RECURRING_PAYMENTS_ENABLED else "pagos"
        renewal_text = (
            "‚ö†Ô∏è *Importante: Tu suscripci√≥n se renovar√° autom√°ticamente, („Å• ·¥ó _·¥ó)„Å•*\n\n "
            "_Puedes cancelarla cuando quieras desde tu cuenta de PayPal, as√≠ que no te preocupes_ (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ )Ÿà‚ú®"
        ) if RECURRING_PAYMENTS_ENABLED else (
            "‚ö†Ô∏è Importante: Este es un pago √∫nico. "
            "Cuando finalice tu per√≠odo, tendr√°s que hacer un nuevo pago si deseas seguir en el grupo VIP"
        )
        
        tutorial_text = (
            f"üé• *Tutorial de {payment_type.capitalize()}*\n\n"
            "Te voy a ayudar a entrar al grupo VIP, ¬°es muy f√°cil! üåü\n\n"
            "‚ù∂ Elige el plan que m√°s te guste (Ejemplo: Semanal o Mensual)\n\n"
            "‚ù∑ Toca el botoncito de pago üíñ\n\n"
            "‚ù∏ Ser√°s redirigid@ a PayPal, donde puedes pagar con:\n"
            "   ‚Ä¢ Cuenta de PayPal\n"
            "   ‚Ä¢ Tarjeta de cr√©dito o d√©bito (sin cuenta tambi√©n est√° bien~)\n\n"
            "‚ùπ Completa el pago y vuelve aqu√≠ a Telegram üèÉ‚Äç‚ôÄÔ∏è\n\n"
            "‚ù∫ Recibir√°s tu entrada brillante y nueva al grupo VIP ‚óù(·µî·µï·µî)‚óú‚ú®\n\n"
            f"{renewal_text}"
        )
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô Volver a los Planes", callback_data="view_plans"))
        
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=tutorial_text,
            parse_mode='Markdown',
            reply_markup=markup
        )
        
        logger.info(f"Usuario {chat_id} est√° viendo el tutorial de pagos")
        
    except Exception as e:
        logger.error(f"Error en show_payment_tutorial: {str(e)}")
        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="‚ùå Ocurri√≥ un error al mostrar el tutorial. Por favor, intenta nuevamente."
            )
        except:
            pass

def handle_plans_callback(call, bot):
    """
    Maneja los callbacks relacionados con la selecci√≥n de planes de forma din√°mica
    """
    try:
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        
        if call.data == "tutorial":
            # Mostrar tutorial de pagos
            show_payment_tutorial(bot, chat_id, message_id)
            
        elif call.data.endswith("_plan"):
            # Extraer el ID del plan desde el callback_data
            plan_id = get_plan_from_callback(call.data)
            if plan_id and plan_id in PLANS:
                # Mostrar detalles del plan
                show_plan_details(bot, chat_id, message_id, plan_id)
            else:
                bot.answer_callback_query(call.id, "Plan no disponible")
                # Volver a mostrar todos los planes
                show_plans(bot, chat_id, message_id)
            
        elif call.data == "view_plans":
            # Volver a la vista de planes
            show_plans(bot, chat_id, message_id)
            
        elif call.data == "back_to_main":
            # Volver al men√∫ principal
            welcome_text = (
                "üëã ¬°ùó¢ùóµùóÆùòÜùóºùòÇ~! „Éæ(‡πë‚ïπ‚ó°‚ïπ)Ôæâ ùó¶ùóºùòÜ ùóπùóÆ ùóΩùóºùóøùòÅùó≤ùóøùóÆ ùó±ùó≤ùóπ ùó¥ùóøùòÇùóΩùóº ùó©ùóúùó£\n\n"
                "Este grupo es un espacio exclusivo con contenido premium y acceso limitado.\n\n"
                "Estoy aqu√≠ para ayudarte a ingresar correctamente al grupo üí´\n\n"
                "Por favor, elige una opci√≥n para continuar üëá"
            )
            
            # Usar create_main_menu_markup() que debe existir en el c√≥digo original
            from bot_handlers import create_main_menu_markup
            
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=welcome_text,
                parse_mode='Markdown',
                reply_markup=create_main_menu_markup()
            )
        
        # Responder al callback para quitar el "reloj de espera" en el cliente
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"Error en handle_plans_callback: {str(e)}")
        try:
            bot.answer_callback_query(call.id, "‚ùå Ocurri√≥ un error. Intenta nuevamente.")
        except:
            pass

def handle_payment_method(call, bot):
    """Maneja la selecci√≥n del m√©todo de pago"""
    try:
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        user_id = call.from_user.id
        
        # Extract payment method and plan from callback data
        _, method, plan_id = call.data.split('_')
        
        # Check if the plan exists in the configuration
        if plan_id not in PLANS:
            bot.answer_callback_query(call.id, "Plan no disponible actualmente")
            logger.error(f"Usuario {user_id} solicit√≥ plan inexistente: {plan_id}")
            
            # Show available plans again
            show_plans(bot, chat_id, message_id)
            return
        
        if method == "paypal":
            # Show processing animation
            # Show initial processing message
            processing_message = bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="‚ú® Preparando algo especial para ti... ‚ú®",
                reply_markup=None
            )
            
            # Start processing animation in a separate thread with proper daemon flag
            animation_thread = threading.Thread(
                target=start_processing_animation,
                args=(bot, chat_id, processing_message.message_id)
            )
            animation_thread.daemon = True
            animation_thread.start()

            # Peque√±a pausa para asegurar que el hilo de animaci√≥n comience
            time.sleep(1)
            
            # Create payment link (will handle both one-time and recurring)
            from payments import create_payment_link
            payment_url = create_payment_link(plan_id, user_id)
            
            # Stop the animation
            if chat_id in payment_animations:
                logger.info(f"Desactivando animaci√≥n para chat {chat_id}")
                payment_animations[chat_id]['active'] = False
                # Dar tiempo para que se detenga la animaci√≥n
                time.sleep(1)
            
            if payment_url:
                # Create markup with pay button
                markup = types.InlineKeyboardMarkup()
                
                # Check if this plan overrides the global recurring setting
                plan = PLANS[plan_id]
                plan_recurring = plan.get('recurring')
                is_recurring = RECURRING_PAYMENTS_ENABLED if plan_recurring is None else plan_recurring
                
                # Payment button text based on payment type
                button_text = "Suscribirse" if is_recurring else "Pagar ahora"
                
                markup.add(
                    types.InlineKeyboardButton(f"üí≥ {button_text}", url=payment_url),
                    types.InlineKeyboardButton("üîô Cancelar", callback_data="view_plans")
                )
                
                # Create plan description dynamically
                payment_type = "Suscripci√≥n" if is_recurring else "Pago √∫nico"
                
                # Determine period based on duration
                if plan['duration_days'] <= 7:
                    period = 'semana'
                elif plan['duration_days'] <= 30:
                    period = 'mes'
                elif plan['duration_days'] <= 90:
                    period = '3 meses'
                elif plan['duration_days'] <= 180:
                    period = '6 meses'
                else:
                    period = 'a√±o'
                
                renewal_text = "(renovaci√≥n autom√°tica)" if is_recurring else "(sin renovaci√≥n autom√°tica)"
                
                # Update message with payment link
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=processing_message.message_id,
                    text=(
                        f"üíå ùóßùòÇ ùó≤ùóªùòÅùóøùóÆùó±ùóÆ ùó≤ùòÄùòÅ√° ùó∞ùóÆùòÄùó∂ ùóπùó∂ùòÄùòÅùóÆ ‡¥¶‡µç‡¥¶‡¥ø ÀâÍí≥Àâ )\n\n"
                        f"üì¶ ùó£ùóπùóÆùóª: {PLANS[plan_id]['display_name']}_\n"
                        f"üí∞ ùó£ùóøùó≤ùó∞ùó∂ùóº:„ÄêÔºÑ{PLANS[plan_id]['price_usd']:.2f} USD „Äë / {period}\n\n"
                        f"Por favor, haz clic en el bot√≥n de aqu√≠ abajo para completar tu {payment_type.lower()} con PayPal.\n\n"
                        "Una vez que termines, te dar√© tu entrada y te dejar√© entrar üíå (À∂ÀÜ·óúÀÜÀµ)"
                    ),
                    parse_mode='Markdown',
                    reply_markup=markup
                )

                
                logger.info(f"Enlace de pago PayPal creado para usuario {user_id}, plan {plan_id}, tipo: {payment_type}")
            else:
                # Error creating payment link
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô Volver", callback_data="view_plans"))
                
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=processing_message.message_id,
                    text=(
                        "‚ùå *Error al crear enlace de pago*\n\n"
                        "Lo sentimos, no pudimos procesar tu solicitud en este momento.\n"
                        "Por favor, intenta nuevamente m√°s tarde o contacta a soporte."
                    ),
                    parse_mode='Markdown',
                    reply_markup=markup
                )
                
                logger.error(f"Error al crear enlace de pago PayPal para usuario {user_id}, plan {plan_id}")
        
        # Answer callback to remove the waiting clock in the client
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"Error en handle_payment_method: {str(e)}")
        try:
            bot.answer_callback_query(call.id, "‚ùå Ocurri√≥ un error. Intenta nuevamente.")
            
            # Stop any ongoing animation
            if chat_id in payment_animations:
                payment_animations[chat_id]['active'] = False
                
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô Volver", callback_data="view_plans"))
                
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=payment_animations[chat_id]['message_id'],
                    text="‚ùå Ocurri√≥ un error. Por favor, intenta nuevamente.",
                    reply_markup=markup
                )
        except:
            pass

def handle_recover_access(message, bot):
    """Maneja la solicitud de recuperaci√≥n de acceso VIP"""
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # Verificar si el usuario tiene una suscripci√≥n activa
        subscription = db.get_active_subscription(user_id)
        
        if not subscription:
            # No tiene suscripci√≥n activa
            no_subscription_text = (
                "‚ùå *No tienes una suscripci√≥n activa*\n\n"
                "Para acceder al grupo VIP, necesitas adquirir una suscripci√≥n.\n"
                "Usa el comando /start para ver nuestros planes disponibles."
            )
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üì¶ Ver Planes", callback_data="view_plans"))
            
            bot.send_message(
                chat_id=chat_id,
                text=no_subscription_text,
                parse_mode='Markdown',
                reply_markup=markup
            )
            
            logger.info(f"Usuario {user_id} intent√≥ recuperar acceso sin suscripci√≥n activa")
            return
        
        # Independientemente de si tiene un enlace activo o no, generar uno nuevo
        # Esto asegura que siempre tenga un enlace v√°lido, incluso si el anterior expir√≥
        
        # Enviar mensaje informativo mientras se genera el enlace
        status_message = bot.send_message(
            chat_id=chat_id,
            text="üîÑ Te har√© otra entrada, esperame un momento ( ‚Ä¢ ·¥ó - ) ‚úß"
        )
        
        # Generar un nuevo enlace
        invite_link = generate_invite_link(bot, user_id, subscription['sub_id'])
        
        if invite_link:
            # Enlace generado correctamente
            new_link_text = (
                "üéüÔ∏è *Nueva entrada al Grupo VIP ( ‚Ä¢ ·¥ó - )*\n\n"
                "*Ok, aqu√≠ est√° tu nueva entrada al grupo:*\n\n"
                f"üíå [ENTRADA AL GRUPO VIP]({invite_link})\n\n"
                f"‚ö†Ô∏è *No olvides que este enlace expira en {INVITE_LINK_EXPIRY_HOURS} horas o despu√©s de un solo uso.*"
            )
            
            # Actualizar el mensaje de estado con el nuevo enlace
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_message.message_id,
                text=new_link_text,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            
            logger.info(f"Usuario {user_id} gener√≥ un nuevo enlace de acceso")
        else:
            # Error al generar el enlace
            error_text = (
                "‚ùå *Error al generar enlace*\n\n"
                "No pudimos generar un nuevo enlace de invitaci√≥n en este momento.\n"
                "Por favor, contacta a soporte para recibir asistencia."
            )
            
            # Actualizar el mensaje de estado con el error
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_message.message_id,
                text=error_text,
                parse_mode='Markdown'
            )
            
            logger.error(f"Error al generar nuevo enlace para usuario {user_id}")
    
    except Exception as e:
        logger.error(f"Error en handle_recover_access: {str(e)}")
        bot.send_message(
            chat_id=message.chat.id,
            text="‚ùå Ocurri√≥ un error al procesar tu solicitud. Por favor, intenta nuevamente m√°s tarde."
        )

# SEGUNDO MANEJO DE WHITELIST
def handle_whitelist_duration(message, bot):
    """Procesa la duraci√≥n para la whitelist"""
    try:
        admin_id = message.from_user.id
        chat_id = message.chat.id
        
        # Verificar que el admin tenga un estado pendiente
        if admin_id not in admin_states or admin_states[admin_id]['action'] != 'whitelist':
            bot.send_message(
                chat_id=chat_id,
                text="‚ùå No hay una solicitud de whitelist pendiente. Usa /whitelist USER_ID para comenzar."
            )
            return
        
        # Extraer la duraci√≥n del mensaje
        duration_text = message.text.strip().lower()
        
        # Verificar si es un comando para cancelar
        if duration_text in ['cancelar', 'cancel', '/cancel', 'stop']:
            # Editar mensaje original
            try:
                original_message_id = admin_states[admin_id]['message_id']
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=original_message_id,
                    text="üö´ *Operaci√≥n de whitelist cancelada.*\n\nLa operaci√≥n ha sido cancelada por el administrador.",
                    parse_mode='Markdown',
                    reply_markup=None
                )
            except Exception as edit_error:
                logger.error(f"Error al editar mensaje: {str(edit_error)}")
                # Si falla la edici√≥n, enviar un nuevo mensaje
                bot.send_message(
                    chat_id=chat_id,
                    text="üö´ *Operaci√≥n de whitelist cancelada.*",
                    parse_mode='Markdown'
                )
                
            # Limpiar estado
            del admin_states[admin_id]
            return
        
        # Parsear la duraci√≥n con la funci√≥n mejorada
        days = parse_duration(duration_text)
        
        if not days or days <= 0:
            bot.send_message(
                chat_id=chat_id,
                text=(
                    "‚ùå *Formato de duraci√≥n no reconocido.*\n\n"
                    "Por favor, utiliza alguno de estos formatos:\n"
                    "‚Ä¢ `X minutes` (minutos)\n"
                    "‚Ä¢ `X hours` (horas)\n"
                    "‚Ä¢ `X days` (d√≠as)\n"
                    "‚Ä¢ `X weeks` (semanas)\n"
                    "‚Ä¢ `X months` (meses)\n\n"
                    "O escribe `cancelar` para abortar la operaci√≥n."
                ),
                parse_mode='Markdown'
            )
            # Volver a solicitar la duraci√≥n - aqu√≠ modificamos para no registrar un nuevo handler
            # en su lugar, confiamos en el estado guardado del admin
            return
        
        # Obtener informaci√≥n del estado
        target_user_id = admin_states[admin_id]['target_user_id']
        
        # Calcular fechas
        start_date = datetime.datetime.now()
        end_date = start_date + datetime.timedelta(days=days)
        
        # Determinar el plan m√°s cercano
        plan_id = 'weekly' if days <= 7 else 'monthly'
        
        # Formatear el texto de duraci√≥n para mostrar
        if days < 1:  # Menos de un d√≠a
            hours = int(days * 24)
            minutes = int((days * 24 * 60) % 60)
            if hours > 0:
                duration_display = f"{hours} hora{'s' if hours != 1 else ''}"
                if minutes > 0:
                    duration_display += f" y {minutes} minuto{'s' if minutes != 1 else ''}"
            else:
                duration_display = f"{minutes} minuto{'s' if minutes != 1 else ''}"
        elif days < 7:  # Menos de una semana
            duration_display = f"{int(days)} d√≠a{'s' if int(days) != 1 else ''}"
        elif days < 30:  # Menos de un mes
            weeks = int(days) // 7
            remaining_days = int(days) % 7
            duration_display = f"{weeks} semana{'s' if weeks != 1 else ''}"
            if remaining_days > 0:
                duration_display += f" y {remaining_days} d√≠a{'s' if remaining_days != 1 else ''}"
        elif days < 365:  # Menos de un a√±o
            months = int(days) // 30
            remaining_days = int(days) % 30
            duration_display = f"{months} mes{'es' if months != 1 else ''}"
            if remaining_days > 0:
                duration_display += f" y {remaining_days} d√≠a{'s' if remaining_days != 1 else ''}"
        else:  # A√±os
            years = int(days) // 365
            remaining_days = int(days) % 365
            duration_display = f"{years} a√±o{'s' if years != 1 else ''}"
            if remaining_days > 30:
                months = remaining_days // 30
                duration_display += f" y {months} mes{'es' if months != 1 else ''}"
        
        # Enviar mensaje de estado
        try:
            bot.send_message(
                chat_id=chat_id,
                text="üîÑ *Procesando solicitud...*\nPor favor espere mientras se configura el acceso y se genera el enlace de invitaci√≥n.",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Error al enviar mensaje de estado: {str(e)}")
        
        # Crear suscripci√≥n en la base de datos
        sub_id = db.create_subscription(
            user_id=target_user_id,
            plan=plan_id,
            price_usd=0.00,  # Gratis por ser whitelist
            start_date=start_date,
            end_date=end_date,
            status='ACTIVE',
            paypal_sub_id=None
        )
        
        # Generar enlace de invitaci√≥n √∫nico
        invite_link = generate_invite_link(bot, target_user_id, sub_id)
        
        # Obtener informaci√≥n del usuario para mensaje personalizado
        user = db.get_user(target_user_id)
        username_display = user.get('username', 'Sin username') if user else 'Sin username'
        first_name = user.get('first_name', '') if user else ''
        last_name = user.get('last_name', '') if user else ''
        full_name = f"{first_name} {last_name}".strip() or "Sin nombre"
        
        # Preparar mensaje de confirmaci√≥n
        confirmation_text = (
            "‚úÖ *Usuario agregado a la whitelist exitosamente*\n\n"
            f"üë§ *Usuario:* {full_name}\n"
            f"üî§ *Username:* @{username_display}\n"
            f"üÜî *ID:* `{target_user_id}`\n\n"
            f"‚è±Ô∏è *Duraci√≥n:* {duration_display}\n"
            f"üìÖ *Fecha de inicio:* {start_date.strftime('%d/%m/%Y %H:%M')}\n"
            f"üóìÔ∏è *Fecha de expiraci√≥n:* {end_date.strftime('%d/%m/%Y %H:%M')}\n"
        )
        
        if invite_link:
            confirmation_text += f"\nüîó *Enlace de invitaci√≥n:* [Enlace √önico]({invite_link})\n‚ö†Ô∏è Este enlace expira en {INVITE_LINK_EXPIRY_HOURS} horas o tras un solo uso."
        else:
            confirmation_text += "\n‚ö†Ô∏è *Advertencia:* No se pudo generar enlace de invitaci√≥n. El usuario puede usar /recover para solicitar uno."
        
        # Enviar mensaje de confirmaci√≥n
        bot.send_message(
            chat_id=chat_id,
            text=confirmation_text,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        
        # Notificar al usuario
        try:
            # Saludo personalizado
            greeting = f"Hola {first_name}" if first_name else "Hola"
            
            user_notification = (
                f"üéüÔ∏è *¬°{greeting}! Has sido agregad@ al grupo VIP (À∂·µî ·µï ·µîÀ∂) üíñ*\n\n"
                f"Un administrador especial te ha concedido acceso por: {duration_display} ~‚ú® \n\n"
            )
            
            if invite_link:
                user_notification += (
                    f"Aqu√≠ tienes tu entrada especial al grupo VIP ‚Çç^. .^‚Çé‚üÜ\n\n"
                    f"üíå [ENTRADA AL GRUPO VIP]({invite_link})\n\n"
                    f"‚ö†Ô∏è *Nota: Esta entrada es √∫nica, personal e intransferible. Expira en {INVITE_LINK_EXPIRY_HOURS} horas o tras un solo uso.*\n\n"
                    "*Si sales del grupo por accidente y el enlace ya expir√≥, no te preocupes~ Usa el comando /recover y te dar√© otra entrada~ üíå*"
                )
            else:
                user_notification += "Usa el comando /recover para solicitar tu enlace de invitaci√≥n."
            
            bot.send_message(
                chat_id=target_user_id,
                text=user_notification,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            
            # Mensaje adicional de √©xito para el admin
            bot.send_message(
                chat_id=chat_id,
                text=f"‚úÖ *Notificaci√≥n enviada*\nSe ha notificado al usuario {full_name} sobre su acceso VIP.",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error al notificar al usuario {target_user_id}: {str(e)}")
            
            # Informar al admin que no se pudo notificar
            bot.send_message(
                chat_id=chat_id,
                text=f"‚ö†Ô∏è *Advertencia*\nNo se pudo notificar al usuario. Es posible que no haya iniciado el bot.",
                parse_mode='Markdown'
            )
        
        # Limpiar el estado
        del admin_states[admin_id]
        
        logger.info(f"Admin {admin_id} agreg√≥ a usuario {target_user_id} a la whitelist por {duration_display}")
        
    except Exception as e:
        logger.error(f"Error en handle_whitelist_duration: {str(e)}")
        bot.send_message(
            chat_id=message.chat.id,
            text="‚ùå *Error en el proceso*\nOcurri√≥ un error al procesar la duraci√≥n. Por favor, intenta nuevamente con /whitelist.",
            parse_mode='Markdown'
        )

def log_admin_state(admin_id):
    """Funci√≥n de diagn√≥stico para registrar el estado actual de un administrador"""
    try:
        if admin_id in admin_states:
            state = admin_states[admin_id]
            logger.info(f"Estado actual del admin {admin_id}: {state}")
        else:
            logger.info(f"El admin {admin_id} no tiene un estado guardado actualmente")
    except Exception as e:
        logger.error(f"Error al registrar estado de admin: {str(e)}")

def debug_whitelist_flow(message, action="check"):
    """Funci√≥n de diagn√≥stico para la funcionalidad de whitelist"""
    try:
        admin_id = message.from_user.id
        chat_id = message.chat.id
        
        if action == "check":
            log_admin_state(admin_id)
            logger.info(f"Mensaje actual: '{message.text}'")
            
        elif action == "setup":
            log_admin_state(admin_id)
            logger.info(f"Configurando estado para admin {admin_id}")
            
        elif action == "process":
            log_admin_state(admin_id)
            logger.info(f"Procesando duraci√≥n: '{message.text}'")
            
            # Intentar parsear la duraci√≥n para diagn√≥stico
            days = parse_duration(message.text)
            logger.info(f"Resultado de parse_duration: {days} d√≠as")
            
        elif action == "complete":
            logger.info(f"Completando proceso de whitelist para admin {admin_id}")
    except Exception as e:
        logger.error(f"Error en debug_whitelist_flow: {str(e)}")

def handle_subinfo(message, bot):
    """Maneja el comando /subinfo para mostrar informaci√≥n de suscripci√≥n de un usuario"""
    try:
        admin_id = message.from_user.id
        chat_id = message.chat.id
        
        # Verificar que sea un administrador
        if admin_id not in ADMIN_IDS:
            bot.send_message(
                chat_id=chat_id,
                text="‚õî No tienes permisos para usar este comando."
            )
            return
        
        # Extraer el ID de usuario del comando
        command_parts = message.text.split()
        
        if len(command_parts) < 2:
            # Mostrar instrucciones de uso
            bot.send_message(
                chat_id=chat_id,
                text="‚ùå Uso incorrecto. Por favor, usa /subinfo USER_ID\n\nEjemplo: /subinfo 1234567890"
            )
            return
        
        try:
            target_user_id = int(command_parts[1])
        except ValueError:
            bot.send_message(
                chat_id=chat_id,
                text="‚ùå ID de usuario inv√°lido. Debe ser un n√∫mero."
            )
            return
        
        # Obtener informaci√≥n del usuario
        user = db.get_user(target_user_id)
        
        if not user:
            bot.send_message(
                chat_id=chat_id,
                text=f"‚ùå Usuario con ID {target_user_id} no encontrado en la base de datos."
            )
            return
        
        # Obtener suscripci√≥n del usuario
        subscription = db.get_subscription_by_user_id(target_user_id)
        
        if not subscription:
            bot.send_message(
                chat_id=chat_id,
                text=f"‚ùå El usuario {target_user_id} no tiene ninguna suscripci√≥n registrada."
            )
            return
        
        # Preparar informaci√≥n a mostrar
        username_display = user.get('username', 'Sin username')
        first_name = user.get('first_name', '')
        last_name = user.get('last_name', '')
        full_name = f"{first_name} {last_name}".strip() or "Sin nombre"
        
        status = subscription['status']
        status_emoji = "üü¢" if status == "ACTIVE" else "üî¥"
        
        start_date = datetime.datetime.fromisoformat(subscription['start_date'])
        end_date = datetime.datetime.fromisoformat(subscription['end_date'])
        
        plan_id = subscription['plan']
        plan_name = PLANS.get(plan_id, {}).get('display_name', plan_id)
        
        payment_method = "PayPal" if subscription['paypal_sub_id'] else "Manual (Whitelist)"
        
        # Crear mensaje con la informaci√≥n
        info_text = (
            f"üë§ ID: {target_user_id}\n"
            f"üßë Nombre: {full_name} (@{username_display})\n"
            f"üìä Estado: {status_emoji} {status}\n\n"
            f"üì• Plan: {plan_name}\n"
            f"üóìÔ∏è Inicio: {start_date.strftime('%d %b %Y')}\n"
            f"‚è≥ Expira: {end_date.strftime('%d %b %Y')}\n\n"
            f"üí≥ Pagos: {payment_method}\n"
        )
        
        if subscription['paypal_sub_id']:
            info_text += f"Subscription ID: {subscription['paypal_sub_id']}"
        
        # Enviar mensaje con la informaci√≥n
        bot.send_message(
            chat_id=chat_id,
            text=info_text,
            parse_mode='Markdown'
        )
        
        logger.info(f"Admin {admin_id} consult√≥ informaci√≥n de suscripci√≥n del usuario {target_user_id}")
        
    except Exception as e:
        logger.error(f"Error en handle_subinfo: {str(e)}")
        bot.send_message(
            chat_id=message.chat.id,
            text="‚ùå Ocurri√≥ un error al consultar la informaci√≥n. Por favor, intenta nuevamente."
        )

def handle_whitelist_list(message, bot):
    """Muestra la lista de usuarios en whitelist"""
    try:
        admin_id = message.from_user.id
        chat_id = message.chat.id
        
        # Verificar que sea un administrador
        if admin_id not in ADMIN_IDS:
            return
        
        # Obtener suscripciones activas (whitelist son todas las suscripciones manuales)
        conn = db.get_db_connection()
        cursor = conn.cursor()
        
        # Consulta para obtener usuarios en whitelist (donde paypal_sub_id es NULL)
        cursor.execute('''
        SELECT s.user_id, u.username, u.first_name, u.last_name, 
               s.start_date, s.end_date, s.status
        FROM subscriptions s
        JOIN users u ON s.user_id = u.user_id
        WHERE s.paypal_sub_id IS NULL AND 
              s.status = 'ACTIVE' AND 
              s.end_date > datetime('now')
        ORDER BY s.end_date ASC
        ''')
        
        whitelist_users = cursor.fetchall()
        conn.close()
        
        if not whitelist_users:
            bot.send_message(
                chat_id=chat_id,
                text="üìã *Lista de Whitelist*\n\nNo hay usuarios en la whitelist actualmente.",
                parse_mode='Markdown'
            )
            return
        
        # Formatear la lista de usuarios
        current_time = datetime.datetime.now()
        whitelist_entries = []
        
        for user in whitelist_users:
            user_id, username, first_name, last_name, start_date_str, end_date_str, status = user
            
            # Nombre para mostrar
            display_name = f"{first_name or ''} {last_name or ''}".strip() or "Sin nombre"
            display_username = f"@{username}" if username else "Sin username"
            
            # Calcular tiempo restante
            try:
                end_date = datetime.datetime.fromisoformat(end_date_str)
                start_date = datetime.datetime.fromisoformat(start_date_str)
                remaining = end_date - current_time
                total_duration = end_date - start_date
                
                # Calcular porcentaje de tiempo transcurrido
                total_seconds = total_duration.total_seconds()
                remaining_seconds = remaining.total_seconds()
                
                # Formatear tiempo restante con m√°s precisi√≥n
                if remaining.total_seconds() > 0:
                    if total_seconds > 3600:  # M√°s de una hora
                        if remaining.days > 0:
                            days_left = remaining.days
                            days_total = total_duration.days
                            status_text = f"{days_left} de {days_total} d√≠as restantes"
                        else:
                            hours_left = int(remaining.total_seconds() / 3600)
                            hours_total = int(total_seconds / 3600)
                            status_text = f"{hours_left} de {hours_total} horas restantes"
                    else:
                        # Para duraciones cortas, mostrar minutos
                        minutes_left = int(remaining.total_seconds() / 60)
                        minutes_total = int(total_seconds / 60)
                        status_text = f"{minutes_left} de {minutes_total} minutos restantes"
                else:
                    status_text = "Expirado"
                
            except Exception as e:
                logger.error(f"Error al procesar fecha {end_date_str}: {e}")
                status_text = f"Fecha: {end_date_str}"
            
            # Crear entrada para la lista
            entry = f"‚Ä¢ {display_name} ({display_username})\n  ID: `{user_id}` - {status_text}"
            whitelist_entries.append(entry)
        
        # Enviar mensaje con la lista
        whitelist_text = "üìã *Lista de Whitelist*\n\n" + "\n\n".join(whitelist_entries)
        
        bot.send_message(
            chat_id=chat_id,
            text=whitelist_text,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error en handle_whitelist_list: {str(e)}")
        bot.send_message(
            chat_id=chat_id,
            text=f"‚ùå Error al obtener la lista de whitelist: {str(e)}"
        )

# A√±ade este nuevo handler para los botones de duraci√≥n de whitelist
def handle_whitelist_callback(call, bot):
    """Maneja los callbacks relacionados con whitelist"""
    try:
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        message_id = call.message.message_id
        
        # Verificar que sea un administrador
        if user_id not in ADMIN_IDS:
            bot.answer_callback_query(call.id, "‚õî No tienes permisos para esta acci√≥n")
            return
        
        # Procesar bot√≥n de cancelar
        if call.data == "whitelist_cancel":
            # Mostrar mensaje de cancelaci√≥n
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="üö´ *Operaci√≥n de whitelist cancelada.*\n\nLa operaci√≥n ha sido cancelada por el administrador.",
                parse_mode='Markdown',
                reply_markup=None
            )
            
            # Limpiar estado si existe
            if user_id in admin_states:
                del admin_states[user_id]
                
            bot.answer_callback_query(call.id, "Operaci√≥n cancelada")
            return
            
    except Exception as e:
        logger.error(f"Error en handle_whitelist_callback: {str(e)}")
        try:
            bot.answer_callback_query(call.id, "‚ùå Error al procesar la solicitud")
        except:
            pass

def handle_unknown_message(message, bot):
    """Maneja mensajes que no coinciden con ning√∫n comando conocido"""
    try:
        bot.send_message(
            chat_id=message.chat.id,
            text="No entiendo ese comando. Por favor, usa /start para ver las opciones disponibles."
        )
    except Exception as e:
        logger.error(f"Error en handle_unknown_message: {str(e)}")

def handle_stats_command(message, bot):
    """
    Comando para administradores que muestra estad√≠sticas del bot
    Uso: /stats
    """
    try:
        import logging
        import database as db
        from config import WEBHOOK_URL, ADMIN_IDS
        
        logger = logging.getLogger(__name__)
        
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # Verificar que sea un administrador
        if user_id not in ADMIN_IDS:
            logger.info(f"Usuario no autorizado {user_id} intent√≥ usar /stats")
            return
        
        # Mensaje de estado mientras se procesan las estad√≠sticas
        status_message = bot.reply_to(
            message,
            "üîÑ Recopilando estad√≠sticas..."
        )
        
        # Obtener conexi√≥n a la base de datos
        conn = db.get_db_connection()
        cursor = conn.cursor()
        
        # Estad√≠sticas principales
        stats = {
            "usuarios": db.get_table_count(conn, "users"),
            "suscripciones": db.get_table_count(conn, "subscriptions"),
            "suscripciones_activas": db.get_active_subscriptions_count(conn),
            "enlaces_invitacion": db.get_table_count(conn, "invite_links"),
            # NUEVO: Contador de renovaciones
            "renovaciones_totales": db.get_table_count(conn, "subscription_renewals")
        }
        
        # Estad√≠sticas adicionales
        
        # Usuarios nuevos en las √∫ltimas 24 horas
        cursor.execute("""
        SELECT COUNT(*) FROM users
        WHERE created_at > datetime('now', '-1 day')
        """)
        stats["usuarios_nuevos_24h"] = cursor.fetchone()[0]
        
        # Suscripciones nuevas en las √∫ltimas 24 horas
        cursor.execute("""
        SELECT COUNT(*) FROM subscriptions
        WHERE start_date > datetime('now', '-1 day')
        """)
        stats["suscripciones_nuevas_24h"] = cursor.fetchone()[0]
        
        # NUEVO: Renovaciones en las √∫ltimas 24 horas
        cursor.execute("""
        SELECT COUNT(*) FROM subscription_renewals
        WHERE renewal_date > datetime('now', '-1 day')
        """)
        stats["renovaciones_24h"] = cursor.fetchone()[0]
        
        # Cantidad de expulsiones
        cursor.execute("SELECT COUNT(*) FROM expulsions")
        stats["expulsiones_totales"] = cursor.fetchone()[0]
        
        # Planes m√°s populares
        cursor.execute("""
        SELECT plan, COUNT(*) as total
        FROM subscriptions
        GROUP BY plan
        ORDER BY total DESC
        """)
        plan_stats = cursor.fetchall()
        
        # NUEVO: Pr√≥ximas renovaciones en los siguientes 7 d√≠as
        cursor.execute("""
        SELECT COUNT(*) FROM subscriptions 
        WHERE status = 'ACTIVE' 
        AND is_recurring = 1
        AND date(end_date) BETWEEN date('now') AND date('now', '+7 day')
        """)
        stats["renovaciones_proximas_7d"] = cursor.fetchone()[0]
        
        # Cerrar conexi√≥n
        conn.close()
        
        # Construir mensaje de estad√≠sticas
        stats_text = (
            "üìä *Estad√≠sticas del Bot*\n\n"
            
            "üë• *Usuarios*\n"
            f"‚Ä¢ Totales: {stats['usuarios']}\n"
            f"‚Ä¢ Nuevos (24h): {stats['usuarios_nuevos_24h']}\n\n"
            
            "üí≥ *Suscripciones*\n"
            f"‚Ä¢ Totales: {stats['suscripciones']}\n"
            f"‚Ä¢ Activas: {stats['suscripciones_activas']}\n"
            f"‚Ä¢ Nuevas (24h): {stats['suscripciones_nuevas_24h']}\n\n"
            
            # NUEVO: Secci√≥n de renovaciones
            "üîÑ *Renovaciones*\n"
            f"‚Ä¢ Totales: {stats['renovaciones_totales']}\n"
            f"‚Ä¢ √öltimas 24h: {stats['renovaciones_24h']}\n"
            f"‚Ä¢ Pr√≥ximos 7 d√≠as: {stats['renovaciones_proximas_7d']}\n\n"
            
            "üîó *Enlaces de Invitaci√≥n*\n"
            f"‚Ä¢ Generados: {stats['enlaces_invitacion']}\n\n"
            
            "üõ°Ô∏è *Seguridad*\n"
            f"‚Ä¢ Expulsiones: {stats['expulsiones_totales']}\n\n"
        )
        
        # A√±adir estad√≠sticas de planes
        if plan_stats:
            stats_text += "üìë *Planes*\n"
            from config import PLANS
            for plan_data in plan_stats:
                plan_id = plan_data[0]
                count = plan_data[1]
                plan_name = PLANS.get(plan_id, {}).get('display_name', plan_id)
                stats_text += f"‚Ä¢ {plan_name}: {count}\n"
            stats_text += "\n"
        
        # A√±adir informaci√≥n del panel de administrador
        import datetime
        stats_text += (
            "üîê *Panel de Administraci√≥n*\n"
            f"‚Ä¢ URL: {WEBHOOK_URL}/admin/panel?admin_id={user_id}\n\n"
            
            # NUEVO: Informaci√≥n sobre comandos de renovaci√≥n
            "üîÑ *Comandos de Renovaci√≥n*\n"
            "‚Ä¢ /check_renewals - Verificaci√≥n manual de renovaciones\n\n"
            
            "üìÖ Actualizado: " + datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        )
        
        # Enviar estad√≠sticas
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=status_message.message_id,
            text=stats_text,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        
        logger.info(f"Admin {user_id} solicit√≥ estad√≠sticas del bot")
        
    except Exception as e:
        logger.error(f"Error en handle_stats_command: {str(e)}")
        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_message.message_id,
                text=f"‚ùå Error al obtener estad√≠sticas: {str(e)}"
            )
        except:
            bot.reply_to(message, f"‚ùå Error al obtener estad√≠sticas: {str(e)}")

def handle_test_invite(message, bot):
    """
    Comando para administradores que permite probar la generaci√≥n de enlaces de invitaci√≥n
    Uso: /test_invite
    """
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # Verificar que sea un administrador
        if user_id not in ADMIN_IDS:
            logger.info(f"Usuario no autorizado {user_id} intent√≥ usar /test_invite")
            return
        
        # Mensaje de estado mientras se procesa
        status_message = bot.reply_to(
            message,
            "üîÑ Generando enlace de invitaci√≥n de prueba..."
        )
        
        # Verificar permisos del bot en el grupo
        from config import GROUP_CHAT_ID
        if not GROUP_CHAT_ID:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_message.message_id,
                text="‚ùå Error: GROUP_CHAT_ID no est√° configurado. No se puede generar enlace."
            )
            return
        
        # Verificar que el bot tenga los permisos necesarios
        try:
            # Obtener informaci√≥n del bot en el grupo
            chat_member = bot.get_chat_member(GROUP_CHAT_ID, bot.get_me().id)
            
            if chat_member.status not in ['administrator', 'creator']:
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=status_message.message_id,
                    text="‚ùå Error: El bot no es administrador en el grupo VIP. No puede generar enlaces."
                )
                return
            
            if not chat_member.can_invite_users:
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=status_message.message_id,
                    text="‚ùå Error: El bot no tiene permiso para invitar usuarios en el grupo VIP."
                )
                return
                
        except Exception as e:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_message.message_id,
                text=f"‚ùå Error al verificar permisos: {str(e)}"
            )
            return
        
        # Intentar generar un enlace de prueba directamente
        try:
            # Calcular fecha de expiraci√≥n (1 hora)
            expire_date = int((datetime.datetime.now() + datetime.timedelta(hours=1)).timestamp())
            
            # Crear enlace directo para 1 solo uso
            invite = bot.create_chat_invite_link(
                chat_id=GROUP_CHAT_ID,
                expire_date=expire_date,
                member_limit=1,
                name=f"Test invite by admin {user_id}",
                creates_join_request=False
            )
            
            # Si llegamos aqu√≠ sin errores, la generaci√≥n fue exitosa
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_message.message_id,
                text=(
                    "‚úÖ Enlace de invitaci√≥n generado exitosamente\n\n"
                    f"üîó {invite.invite_link}\n\n"
                    "‚ÑπÔ∏è Este es un enlace de prueba que expira en 1 hora y permite un solo uso.\n"
                    "üìù No se ha registrado en la base de datos."
                ),
                disable_web_page_preview=True
            )
            
            logger.info(f"Admin {user_id} gener√≥ un enlace de prueba exitosamente")
            
        except Exception as e:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_message.message_id,
                text=(
                    f"‚ùå Error al generar enlace: {str(e)}\n\n"
                    "Posibles causas:\n"
                    "‚Ä¢ El bot no tiene permisos suficientes en el grupo\n"
                    "‚Ä¢ El ID del grupo es incorrecto\n"
                    "‚Ä¢ La API de Telegram est√° teniendo problemas"
                )
            )
            
            logger.error(f"Error al generar enlace de prueba: {str(e)}")
            
    except Exception as e:
        logger.error(f"Error en handle_test_invite: {str(e)}")
        bot.reply_to(message, f"‚ùå Error inesperado: {str(e)}")

def admin_force_security_check(message, bot):
    """
    Manejador para el comando /force_security_check
    Permite a los administradores forzar una verificaci√≥n de seguridad inmediata
    """
    try:
        admin_id = message.from_user.id
        chat_id = message.chat.id
        
        # Verificar que sea un administrador
        if admin_id not in ADMIN_IDS:
            return
        
        # Enviar mensaje de estado
        status_message = bot.reply_to(
            message,
            "üîÑ Iniciando verificaci√≥n de seguridad forzada. Por favor espere..."
        )
        
        # Forzar verificaci√≥n
        result = force_security_check(bot)
        
        if result:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_message.message_id,
                text="‚úÖ Verificaci√≥n de seguridad completada exitosamente"
            )
        else:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_message.message_id,
                text="‚ùå La verificaci√≥n de seguridad fall√≥. Por favor, revise los logs para m√°s detalles."
            )
        
    except Exception as e:
        logger.error(f"Error en admin_force_security_check: {e}")
        try:
            bot.reply_to(message, f"‚ùå Error: {str(e)}")
        except:
            pass

def handle_check_renewals(message, bot):
    """
    Comando de administrador para verificar manualmente las renovaciones pendientes
    Uso: /check_renewals
    """
    try:
        user_id = message.from_user.id
        
        # Verificar que sea un administrador
        if user_id not in ADMIN_IDS:
            return
            
        # Enviar mensaje inicial
        status_message = bot.reply_to(
            message,
            "üîÑ Verificando renovaciones pendientes..."
        )
        
        # Importar funci√≥n desde payments
        import payments as pay
        
        # Ejecutar verificaci√≥n
        notified, errors = pay.process_subscription_renewals(bot)
        
        if notified >= 0:
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_message.message_id,
                text=f"‚úÖ Verificaci√≥n completada: {notified} renovaciones notificadas, {errors} errores"
            )
        else:
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_message.message_id,
                text="‚ùå Error al verificar renovaciones. Revise los logs para m√°s detalles."
            )
            
    except Exception as e:
        logger.error(f"Error en handle_check_renewals: {str(e)}")
        bot.reply_to(message, f"‚ùå Error: {str(e)}")

def register_admin_commands(bot):
    """Registra comandos exclusivos para administradores"""
    from config import ADMIN_IDS
    
    # Handler para estad√≠sticas del bot (solo admins)
    bot.register_message_handler(
        lambda message: handle_stats_command(message, bot),
        func=lambda message: message.from_user.id in ADMIN_IDS and 
                           (message.text == '/stats' or message.text == '/estadisticas')
    )

    bot.register_message_handler(
    lambda message: handle_check_renewals(message, bot),
    func=lambda message: message.from_user.id in ADMIN_IDS and message.text == '/check_renewals'
    )
    
    # Handler para probar la generaci√≥n de enlaces de invitaci√≥n (solo admins)
    bot.register_message_handler(
        lambda message: handle_test_invite(message, bot),
        func=lambda message: message.from_user.id in ADMIN_IDS and message.text == '/test_invite'
    )
    
    # Handler para verificar permisos del bot
    bot.register_message_handler(
        lambda message: check_and_fix_bot_permissions(message, bot),
        func=lambda message: message.from_user.id in ADMIN_IDS and message.text == '/check_bot_permissions'
    )
    
    # Handler para whitelist
    bot.register_message_handler(
        lambda message: handle_whitelist(message, bot),
        func=lambda message: message.from_user.id in ADMIN_IDS and message.text.startswith('/whitelist')
    )
    
    # Handler para subinfo
    bot.register_message_handler(
        lambda message: handle_subinfo(message, bot),
        func=lambda message: message.from_user.id in ADMIN_IDS and message.text.startswith('/subinfo')
    )
    
    # Comando de verificaci√≥n de permisos para admins
    bot.register_message_handler(
        lambda message: verify_bot_permissions(bot) and bot.reply_to(message, "‚úÖ Verificaci√≥n de permisos del bot completada. Revisa los mensajes privados para detalles."),
        func=lambda message: message.from_user.id in ADMIN_IDS and message.text == '/check_permissions'
    )
    
    logger.info("Comandos de administrador registrados correctamente")


def register_handlers(bot):
    """Registra todos los handlers con el bot"""
    
    # Registrar comandos de administrador primero
    register_admin_commands(bot)

    # Handler para verificar permisos del bot
    bot.register_message_handler(
        lambda message: check_and_fix_bot_permissions(message, bot),
        commands=['check_bot_permissions']
    )
    
    # Handler para el comando /start
    bot.register_message_handler(lambda message: handle_start(message, bot), commands=['start'])
    
    # IMPORTANTE: El handler para verify_all debe ir ANTES que otros handlers
    bot.register_message_handler(lambda message: handle_verify_all_members(message, bot), 
                              commands=['verify_all', 'force_verify'])
    
    # A√±adir nuevo comando para forzar verificaci√≥n de seguridad
    bot.register_message_handler(
        lambda message: admin_force_security_check(message, bot),
        func=lambda message: message.from_user.id in ADMIN_IDS and message.text == '/force_security_check'
    )
    
    # Handler para nuevos miembros
    bot.register_message_handler(lambda message: handle_new_chat_members(message, bot), 
                              content_types=['new_chat_members'])
    
    # Handler para el comando de recuperaci√≥n de acceso
    bot.register_message_handler(lambda message: handle_recover_access(message, bot), 
                              func=lambda message: message.text == 'üéüÔ∏è Recuperar Acceso VIP' or 
                                                  message.text == '/recover' or
                                                  message.text.startswith('/recover'))
    
    # Callback handlers para los botones
    bot.register_callback_query_handler(lambda call: handle_main_menu_callback(call, bot), 
                                      func=lambda call: call.data in ['view_plans', 'bot_credits', 'terms'])
    
    bot.register_callback_query_handler(lambda call: handle_plans_callback(call, bot), 
                                      func=lambda call: call.data in ['tutorial', 'weekly_plan', 'monthly_plan', 'back_to_main'])
    
    bot.register_callback_query_handler(lambda call: handle_payment_method(call, bot), 
                                      func=lambda call: call.data.startswith('payment_'))
    
    # Handler por defecto para mensajes no reconocidos
    bot.register_message_handler(lambda message: handle_unknown_message(message, bot), func=lambda message: True)
    
    # Iniciar verificaci√≥n peri√≥dica autom√°tica
    security_thread = schedule_security_verification(bot)
    
    # Forzar una verificaci√≥n inicial completa
    force_security_check(bot)
    
    # Programar verificaciones peri√≥dicas del estado del hilo
    def check_thread_periodically():
        while True:
            time.sleep(300)  # Comprobar cada 5 minutos
            try:
                check_security_thread_status(bot)
            except Exception as e:
                logger.error(f"Error en la verificaci√≥n peri√≥dica del hilo: {e}")
    
    # Iniciar hilo de supervisi√≥n
    monitor_thread = threading.Thread(target=check_thread_periodically, daemon=True)
    monitor_thread.start()