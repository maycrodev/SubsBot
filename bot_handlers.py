import logging
from telebot import types
import database as db
from config import ADMIN_IDS, PLANS, INVITE_LINK_EXPIRY_HOURS, INVITE_LINK_MEMBER_LIMIT, GROUP_INVITE_LINK
import payments as pay
import datetime
import threading
import time
import os
import re
from typing import Dict, Optional, Tuple, Any

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Diccionario para almacenar estados de administradores
admin_states = {}

# Diccionario para almacenar las animaciones de pago en curso
payment_animations = {}

# Funciones de utilidad
def parse_duration(duration_text: str) -> Optional[int]:
    """
    Parsea una duraci√≥n en texto y la convierte a d√≠as.
    Ejemplos: '7 days', '1 week', '1 month', '3 months'
    Retorna None si no se puede parsear.
    """
    try:
        # Patrones para diferentes formatos
        day_pattern = re.compile(r'(\d+)\s*(?:day|days|d√≠a|dias|d)', re.IGNORECASE)
        week_pattern = re.compile(r'(\d+)\s*(?:week|weeks|semana|semanas|w)', re.IGNORECASE)
        month_pattern = re.compile(r'(\d+)\s*(?:month|months|mes|meses|m)', re.IGNORECASE)
        year_pattern = re.compile(r'(\d+)\s*(?:year|years|a√±o|a√±os|y)', re.IGNORECASE)
        
        # Verificar cada patr√≥n
        day_match = day_pattern.search(duration_text)
        if day_match:
            return int(day_match.group(1))
        
        week_match = week_pattern.search(duration_text)
        if week_match:
            return int(week_match.group(1)) * 7
        
        month_match = month_pattern.search(duration_text)
        if month_match:
            return int(month_match.group(1)) * 30
        
        year_match = year_pattern.search(duration_text)
        if year_match:
            return int(year_match.group(1)) * 365
        
        # Si es solo un n√∫mero, asumir d√≠as
        if duration_text.isdigit():
            return int(duration_text)
        
        # No se pudo parsear
        return None
        
    except Exception as e:
        logger.error(f"Error al parsear duraci√≥n '{duration_text}': {str(e)}")
        return None

def create_invite_link(bot, user_id, sub_id):
    """
    Crea un enlace de invitaci√≥n para el grupo VIP.
    Utiliza la API de Telegram para crear un enlace temporal y √∫nico.
    """
    try:
        # Para un bot real, esto deber√≠a usar createChatInviteLink
        # En este ejemplo, usaremos un enlace est√°tico o simulado
        if not GROUP_INVITE_LINK:
            logger.error("GROUP_INVITE_LINK no est√° configurado")
            return None
            
        # En un bot real, aqu√≠ llamar√≠amos a:
        # invite = bot.create_chat_invite_link(
        #     chat_id=-GROUP_CHAT_ID,  # ID del grupo VIP
        #     expire_date=int((datetime.datetime.now() + datetime.timedelta(hours=INVITE_LINK_EXPIRY_HOURS)).timestamp()),
        #     member_limit=INVITE_LINK_MEMBER_LIMIT,
        #     name=f"Invite for user {user_id}",
        #     creates_join_request=False
        # )
        # invite_link = invite.invite_link
        
        # Para este ejemplo, simulamos el enlace
        invite_link = f"{GROUP_INVITE_LINK}?ref={user_id}_{sub_id}"
        
        # Calcular la fecha de expiraci√≥n
        created_at = datetime.datetime.now()
        expires_at = created_at + datetime.timedelta(hours=INVITE_LINK_EXPIRY_HOURS)
        
        # Guardar el enlace en la base de datos
        db.save_invite_link(
            sub_id=sub_id,
            invite_link=invite_link,
            created_at=created_at,
            expires_at=expires_at
        )
        
        logger.info(f"Enlace de invitaci√≥n creado para usuario {user_id}, expira en {INVITE_LINK_EXPIRY_HOURS} horas")
        
        return invite_link
        
    except Exception as e:
        logger.error(f"Error al crear enlace de invitaci√≥n: {str(e)}")
        return None

def start_processing_animation(bot, chat_id, message_id):
    """Inicia una animaci√≥n de procesamiento en el mensaje"""
    try:
        animation_markers = ['/', '-', '|', '\\']
        current_index = 0
        
        # Registrar la animaci√≥n
        payment_animations[chat_id] = {
            'active': True,
            'message_id': message_id
        }
        
        while chat_id in payment_animations and payment_animations[chat_id]['active']:
            try:
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=(
                        "üîÑ Confirmando Pago\n"
                        f"      {animation_markers[current_index]}      \n"
                        "Aguarde por favor..."
                    )
                )
                
                # Actualizar √≠ndice de animaci√≥n
                current_index = (current_index + 1) % len(animation_markers)
                
                # Esperar antes de la siguiente actualizaci√≥n
                time.sleep(0.5)
            except Exception as e:
                logger.error(f"Error en animaci√≥n: {str(e)}")
                break
    except Exception as e:
        logger.error(f"Error en start_processing_animation: {str(e)}")

def generate_invite_link(bot, user_id, sub_id):
    """Genera un enlace de invitaci√≥n para el grupo VIP"""
    try:
        # Crear enlace con expiraci√≥n y l√≠mite de miembros
        invite_link = create_invite_link(bot, user_id, sub_id)
        
        if invite_link:
            logger.info(f"Enlace de invitaci√≥n generado para usuario {user_id}")
            return invite_link
        else:
            logger.error(f"No se pudo generar enlace de invitaci√≥n para usuario {user_id}")
            return None
            
    except Exception as e:
        logger.error(f"Error en generate_invite_link: {str(e)}")
        return None

def process_successful_subscription(bot, user_id: int, plan_id: str, paypal_sub_id: str, 
                                  subscription_details: Dict) -> bool:
    """Procesa una suscripci√≥n exitosa"""
    try:
        # Obtener detalles del plan
        plan = PLANS.get(plan_id)
        if not plan:
            logger.error(f"Plan no encontrado: {plan_id}")
            return False
        
        # Obtener informaci√≥n del usuario
        user = db.get_user(user_id)
        if not user:
            # Guardar usuario con informaci√≥n m√≠nima si no existe
            db.save_user(user_id)
            user = {'user_id': user_id, 'username': None, 'first_name': None, 'last_name': None}
        
        # Calcular fechas
        start_date = datetime.datetime.now()
        end_date = start_date + datetime.timedelta(days=plan['duration_days'])
        
        # Crear suscripci√≥n en la base de datos
        sub_id = db.create_subscription(
            user_id=user_id,
            plan=plan_id,
            price_usd=plan['price_usd'],
            start_date=start_date,
            end_date=end_date,
            status='ACTIVE',
            paypal_sub_id=paypal_sub_id
        )
        
        # Generar enlace de invitaci√≥n
        invite_link = generate_invite_link(bot, user_id, sub_id)
        
        if not invite_link:
            logger.error(f"No se pudo generar enlace de invitaci√≥n para usuario {user_id}")
            # A√∫n continuamos con el proceso, solo que sin enlace
        
        # Enviar mensaje de confirmaci√≥n al usuario
        confirmation_text = (
            "üéüÔ∏è ¬°Acceso VIP Confirmado!\n\n"
            "Aqu√≠ tienes tu acceso exclusivo üëá\n"
        )
        
        if invite_link:
            confirmation_text += f"üîó [√önete al Grupo VIP]({invite_link})\n\n"
            confirmation_text += f"‚ö†Ô∏è Nota: El enlace expira en {INVITE_LINK_EXPIRY_HOURS} horas o tras un solo uso."
        else:
            confirmation_text += "‚ùå No se pudo generar el enlace de invitaci√≥n. Por favor, contacta a soporte."
        
        bot.send_message(
            chat_id=user_id,
            text=confirmation_text,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        
        # Notificar a los administradores
        username_display = user.get('username', 'Sin username')
        first_name = user.get('first_name', '')
        last_name = user.get('last_name', '')
        full_name = f"{first_name} {last_name}".strip() or "Sin nombre"
        
        admin_notification = (
            "üéâ ¬°Nueva Suscripci√≥n! (PayPal)\n\n"
            "Detalles:\n"
            f"‚Ä¢ ID pago: {paypal_sub_id}\n"
            f"‚Ä¢ Usuario: {username_display} (@{username_display}) (id{user_id})\n"
            f"‚Ä¢ Nombre: {full_name}\n"
            f"‚Ä¢ Plan: {plan['display_name']}\n"
            f"‚Ä¢ Facturaci√≥n: ${plan['price_usd']:.2f} / "
            f"{'1 semana' if plan_id == 'weekly' else '1 mes'}\n"
            f"‚Ä¢ Fecha: {start_date.strftime('%d %b %Y %I:%M %p')}\n"
            f"‚Ä¢ Expira: {end_date.strftime('%d %b %Y')}\n"
            f"‚Ä¢ Estado: ‚úÖ ACTIVO"
        )
        
        for admin_id in ADMIN_IDS:
            try:
                bot.send_message(
                    chat_id=admin_id,
                    text=admin_notification,
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Error al notificar al admin {admin_id}: {str(e)}")
        
        logger.info(f"Suscripci√≥n exitosa procesada para usuario {user_id}, plan {plan_id}")
        return True
        
    except Exception as e:
        logger.error(f"Error en process_successful_subscription: {str(e)}")
        return False

def update_subscription_from_webhook(bot, event_data: Dict) -> bool:
    """Actualiza la suscripci√≥n en la base de datos seg√∫n el evento de webhook de PayPal"""
    try:
        event_type = event_data.get("event_type")
        resource = event_data.get("resource", {})
        subscription_id = resource.get("id")
        
        if not subscription_id:
            logger.error("Evento de webhook sin ID de suscripci√≥n")
            return False
        
        # Obtener la suscripci√≥n de la base de datos
        subscription = db.get_subscription_by_paypal_id(subscription_id)
        if not subscription:
            logger.error(f"Suscripci√≥n no encontrada para PayPal ID: {subscription_id}")
            return False
        
        sub_id = subscription['sub_id']
        user_id = subscription['user_id']
        
        # Manejar los diferentes tipos de eventos
        if event_type == "BILLING.SUBSCRIPTION.ACTIVATED":
            # Marcar la suscripci√≥n como activa
            db.update_subscription_status(sub_id, "ACTIVE")
            logger.info(f"Suscripci√≥n {sub_id} activada")
            
        elif event_type == "BILLING.SUBSCRIPTION.UPDATED":
            # Verificar si hay cambios en la fecha de expiraci√≥n
            # Esto depender√° de la estructura exacta del evento
            pass
            
        elif event_type == "BILLING.SUBSCRIPTION.CANCELLED":
            # Marcar la suscripci√≥n como cancelada
            db.update_subscription_status(sub_id, "CANCELLED")
            
            # Notificar al usuario
            try:
                bot.send_message(
                    chat_id=user_id,
                    text=(
                        "‚ùå *Tu suscripci√≥n ha sido cancelada*\n\n"
                        "Has sido expulsado del grupo VIP. Si deseas volver a suscribirte, "
                        "utiliza el comando /start para ver nuestros planes disponibles."
                    ),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Error al notificar cancelaci√≥n al usuario {user_id}: {str(e)}")
            
            logger.info(f"Suscripci√≥n {sub_id} cancelada")
            
        elif event_type == "BILLING.SUBSCRIPTION.SUSPENDED":
            # Marcar la suscripci√≥n como suspendida
            db.update_subscription_status(sub_id, "SUSPENDED")
            
            # Notificar al usuario
            try:
                bot.send_message(
                    chat_id=user_id,
                    text=(
                        "‚ö†Ô∏è *Tu suscripci√≥n ha sido suspendida*\n\n"
                        "Tu acceso al grupo VIP puede verse afectado. Por favor, verifica tu m√©todo de pago "
                        "en PayPal para reactivar tu suscripci√≥n."
                    ),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Error al notificar suspensi√≥n al usuario {user_id}: {str(e)}")
            
            logger.info(f"Suscripci√≥n {sub_id} suspendida")
            
        elif event_type == "BILLING.SUBSCRIPTION.PAYMENT.FAILED":
            # Notificar al usuario sobre el pago fallido
            try:
                bot.send_message(
                    chat_id=user_id,
                    text=(
                        "‚ö†Ô∏è *Pago fallido*\n\n"
                        "No pudimos procesar el pago de tu suscripci√≥n. Por favor, verifica tu m√©todo de pago "
                        "en PayPal para evitar la cancelaci√≥n de tu acceso al grupo VIP."
                    ),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Error al notificar pago fallido al usuario {user_id}: {str(e)}")
            
            logger.info(f"Pago fallido para suscripci√≥n {sub_id}")
            
        elif event_type == "PAYMENT.SALE.COMPLETED":
            # Un pago fue completado exitosamente (renovaci√≥n)
            plan_id = subscription['plan']
            plan = PLANS.get(plan_id)
            
            if not plan:
                logger.error(f"Plan no encontrado para suscripci√≥n {sub_id}")
                return False
            
            # Calcular nueva fecha de expiraci√≥n
            current_end_date = datetime.datetime.fromisoformat(subscription['end_date'])
            new_end_date = current_end_date + datetime.timedelta(days=plan['duration_days'])
            
            # Extender la suscripci√≥n
            db.extend_subscription(sub_id, new_end_date)
            
            # Notificar al usuario
            try:
                bot.send_message(
                    chat_id=user_id,
                    text=(
                        "‚úÖ *Suscripci√≥n renovada exitosamente*\n\n"
                        f"Tu suscripci√≥n al grupo VIP ha sido renovada hasta el {new_end_date.strftime('%d %b %Y')}.\n"
                        "¬°Gracias por tu continuado apoyo!"
                    ),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Error al notificar renovaci√≥n al usuario {user_id}: {str(e)}")
            
            logger.info(f"Suscripci√≥n {sub_id} renovada hasta {new_end_date}")
        
        return True
        
    except Exception as e:
        logger.error(f"Error en update_subscription_from_webhook: {str(e)}")
        return False

# Handlers de Telegram
def create_main_menu_markup():
    """Crea los botones para el men√∫ principal"""
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("üì¶ Ver Planes", callback_data="view_plans"),
        types.InlineKeyboardButton("üß† Cr√©ditos del Bot", callback_data="bot_credits"),
        types.InlineKeyboardButton("üìú T√©rminos de Uso", callback_data="terms")
    )
    return markup

def create_plans_markup():
    """Crea los botones para el men√∫ de planes"""
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    # Agregar tutorial de pagos
    markup.add(types.InlineKeyboardButton("üé• Tutorial de Pagos", callback_data="tutorial"))
    
    # Agregar planes
    markup.add(
        types.InlineKeyboardButton("üóìÔ∏è Plan Semanal", callback_data="weekly_plan"),
        types.InlineKeyboardButton("üìÜ Plan Mensual", callback_data="monthly_plan")
    )
    
    # Agregar bot√≥n de volver
    markup.add(types.InlineKeyboardButton("üîô Atr√°s", callback_data="back_to_main"))
    
    return markup

# 1. VERIFICACI√ìN PERI√ìDICA AUTOM√ÅTICA
# A√±ade esta funci√≥n al archivo bot_handlers.py

def schedule_security_verification(bot):
    """
    Configura una verificaci√≥n de seguridad peri√≥dica para ejecutarse cada 6 horas
    """
    import threading
    import time
    from config import GROUP_CHAT_ID, ADMIN_IDS
    
    def security_check_thread():
        """Hilo que ejecuta la verificaci√≥n peri√≥dica de seguridad"""
        try:
            # Ejecutar una verificaci√≥n inmediata al iniciar
            logger.info("Ejecutando verificaci√≥n inicial de seguridad")
            if GROUP_CHAT_ID:
                perform_group_security_check(bot, GROUP_CHAT_ID)
            else:
                logger.error("GROUP_CHAT_ID no configurado para verificaci√≥n inicial")
        except Exception as e:
            logger.error(f"Error en verificaci√≥n inicial: {e}")
            
        # Ciclo de verificaci√≥n peri√≥dica
        while True:
            try:
                # Esperar 6 horas entre verificaciones (en segundos)
                time.sleep(21600)  # 6 horas * 60 minutos * 60 segundos
                
                logger.info("Iniciando verificaci√≥n peri√≥dica de seguridad programada")
                
                # No ejecutar si no hay un grupo configurado
                if not GROUP_CHAT_ID:
                    logger.error("No hay ID de grupo configurado para la verificaci√≥n de seguridad")
                    continue
                
                # Ejecutar la verificaci√≥n
                perform_group_security_check(bot, GROUP_CHAT_ID)
                
            except Exception as e:
                logger.error(f"Error en el hilo de verificaci√≥n peri√≥dica: {e}")
                # Si hay un error, esperamos 1 hora antes de intentar de nuevo
                time.sleep(3600)
    
    # Iniciar el hilo de verificaci√≥n
    security_thread = threading.Thread(target=security_check_thread)
    security_thread.daemon = True
    security_thread.start()
    
    logger.info("Sistema de verificaci√≥n peri√≥dica de seguridad iniciado")


def perform_group_security_check(bot, group_id):
    """
    Realiza una verificaci√≥n completa de seguridad del grupo
    Expulsa a todos los miembros que no tienen suscripci√≥n activa
    """
    try:
        from config import ADMIN_IDS
        
        # Convertir group_id a string para comparaci√≥n consistente
        group_id_str = str(group_id)
        
        logger.info(f"Iniciando verificaci√≥n autom√°tica de seguridad del grupo {group_id_str}")
        
        # Verificar que el bot tenga permisos necesarios
        try:
            bot_member = bot.get_chat_member(group_id, bot.get_me().id)
            
            if bot_member.status not in ['administrator', 'creator']:
                logger.error(f"CR√çTICO: El bot no tiene permisos de administrador en el grupo {group_id}")
                # Notificar a todos los administradores
                for admin_id in ADMIN_IDS:
                    try:
                        bot.send_message(
                            chat_id=admin_id,
                            text=f"‚ö†Ô∏è ALERTA DE SEGURIDAD CR√çTICA: El bot no tiene permisos de administrador en el grupo VIP.\n\nLa verificaci√≥n autom√°tica de seguridad no puede ejecutarse. Por favor, haga al bot administrador del grupo."
                        )
                    except Exception as e:
                        logger.error(f"No se pudo notificar al admin {admin_id}: {e}")
                return False
            
            if not getattr(bot_member, 'can_restrict_members', False):
                logger.error(f"CR√çTICO: El bot no tiene permiso para expulsar usuarios en el grupo {group_id}")
                # Notificar a todos los administradores
                for admin_id in ADMIN_IDS:
                    try:
                        bot.send_message(
                            chat_id=admin_id,
                            text=f"‚ö†Ô∏è ALERTA DE SEGURIDAD CR√çTICA: El bot es administrador pero no tiene permiso espec√≠fico para expulsar miembros en el grupo VIP.\n\nPor favor, edite los permisos del bot y active 'Expulsar usuarios'."
                        )
                    except Exception as e:
                        logger.error(f"No se pudo notificar al admin {admin_id}: {e}")
                return False
                
            logger.info(f"El bot tiene los permisos necesarios para la verificaci√≥n de seguridad")
            
        except Exception as e:
            logger.error(f"Error al verificar permisos del bot: {e}")
            return False
        
        # Lista de administradores que no debemos expulsar
        admin_ids = list(ADMIN_IDS)  # Convertir a lista nueva
        
        # A√±adir administradores del grupo
        try:
            admins = bot.get_chat_administrators(chat_id=group_id)
            for admin in admins:
                if admin.user.id not in admin_ids:
                    admin_ids.append(admin.user.id)
            logger.info(f"Lista de administradores: {admin_ids}")
        except Exception as e:
            logger.error(f"Error al obtener administradores del grupo: {e}")
            # Continuamos con la lista de admins que tenemos
        
        # Obtener todos los miembros visibles del grupo
        members = []
        try:
            # Obtener miembros visibles (hasta 200, l√≠mite de Telegram)
            chat_members = bot.get_chat_members(chat_id=group_id, offset=0, limit=200)
            members.extend(chat_members)
            logger.info(f"Obtenidos {len(members)} miembros del grupo para verificaci√≥n")
        except Exception as e:
            logger.error(f"Error al obtener miembros del grupo: {e}")
            # Notificar a los administradores
            for admin_id in ADMIN_IDS:
                try:
                    bot.send_message(
                        chat_id=admin_id,
                        text=f"‚ö†Ô∏è Error en verificaci√≥n autom√°tica: No se pudieron obtener miembros del grupo.\nError: {str(e)}"
                    )
                except:
                    pass
            return False
        
        # Identificar miembros no autorizados
        unauthorized_members = []
        
        for member in members:
            member_id = member.user.id
            username = member.user.username or f"User{member_id}"
            
            # Omitir bots
            if member.user.is_bot:
                logger.debug(f"Omitiendo bot: {username}")
                continue
                
            # Omitir administradores
            if member_id in admin_ids:
                logger.debug(f"Omitiendo administrador: {username}")
                continue
            
            # Verificar si tiene suscripci√≥n activa
            subscription = db.get_active_subscription(member_id)
            if not subscription:
                logger.warning(f"‚ö†Ô∏è MIEMBRO NO AUTORIZADO: {member_id} (@{username})")
                unauthorized_members.append((member_id, username))
                
                # Informaci√≥n del usuario para los logs
                first_name = getattr(member.user, 'first_name', '') or ''
                last_name = getattr(member.user, 'last_name', '') or ''
                full_name = f"{first_name} {last_name}".strip() or "Usuario"
                
                # Intentar expulsar de inmediato sin esperar
                try:
                    logger.info(f"Expulsando a usuario no autorizado: {member_id} (@{username})")
                    
                    # Notificar al grupo sobre la expulsi√≥n
                    bot.send_message(
                        chat_id=group_id,
                        text=f"üõë SEGURIDAD: Usuario {full_name} (@{username}) no tiene suscripci√≥n activa y ser√° expulsado autom√°ticamente."
                    )
                    
                    # Expulsar al usuario
                    ban_result = bot.ban_chat_member(
                        chat_id=group_id,
                        user_id=member_id
                    )
                    
                    # Desbanear inmediatamente para permitir que vuelva a unirse si obtiene suscripci√≥n
                    unban_result = bot.unban_chat_member(
                        chat_id=group_id,
                        user_id=member_id,
                        only_if_banned=True
                    )
                    
                    # Registrar la expulsi√≥n en la base de datos
                    db.record_expulsion(member_id, "Verificaci√≥n autom√°tica - Sin suscripci√≥n activa")
                    
                    # Enviar mensaje privado al usuario
                    try:
                        bot.send_message(
                            chat_id=member_id,
                            text=f"‚ùå Has sido expulsado del grupo VIP porque no tienes una suscripci√≥n activa.\n\nPara volver a unirte, adquiere una suscripci√≥n en @VIPSubscriptionBot con el comando /start."
                        )
                    except Exception as e:
                        logger.error(f"No se pudo enviar mensaje privado a {member_id}: {e}")
                    
                    # Notificar a los administradores
                    for admin_id in ADMIN_IDS:
                        try:
                            bot.send_message(
                                chat_id=admin_id,
                                text=f"üõë SEGURIDAD AUTOM√ÅTICA: Usuario {full_name} (@{username}) ID:{member_id} fue expulsado por no tener suscripci√≥n activa."
                            )
                        except Exception as e:
                            logger.error(f"No se pudo notificar al admin {admin_id}: {e}")
                    
                except Exception as e:
                    logger.error(f"ERROR al expulsar a usuario no autorizado {member_id}: {e}")
        
        # Resumen final
        logger.info(f"Verificaci√≥n de seguridad completada: {len(unauthorized_members)} miembros no autorizados identificados y expulsados")
        
        # Notificar resultados a administradores
        if unauthorized_members:
            for admin_id in ADMIN_IDS:
                try:
                    bot.send_message(
                        chat_id=admin_id,
                        text=f"‚úÖ Verificaci√≥n autom√°tica completada: Se expulsaron {len(unauthorized_members)} usuarios sin suscripci√≥n activa."
                    )
                except:
                    pass
        
        return True
        
    except Exception as e:
        logger.error(f"Error en verificaci√≥n de seguridad: {e}")
        # Notificar a los administradores
        for admin_id in ADMIN_IDS:
            try:
                bot.send_message(
                    chat_id=admin_id,
                    text=f"‚ùå Error en verificaci√≥n autom√°tica de seguridad: {str(e)}"
                )
            except:
                pass
        return False


# 2. MEJORA DEL COMANDO /verify_all
# Reemplaza la funci√≥n handle_verify_all_members con esta versi√≥n mejorada:

def handle_verify_all_members(message, bot):
    """
    Comando para verificar y expulsar manualmente a todos los miembros no autorizados del grupo
    """
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # Log para depuraci√≥n
        logger.info(f"Comando /verify_all recibido de usuario {user_id} en chat {chat_id}")
        
        # Verificar que sea un administrador
        if user_id not in ADMIN_IDS:
            logger.info(f"Usuario {user_id} intent√≥ usar /verify_all pero no es administrador")
            bot.reply_to(message, "‚ö†Ô∏è Este comando solo est√° disponible para administradores.")
            return
        
        # Verificar que el mensaje sea del grupo VIP o de un chat privado con el administrador
        from config import GROUP_CHAT_ID
        if str(chat_id) != str(GROUP_CHAT_ID) and message.chat.type != 'private':
            logger.info(f"Comando /verify_all usado en chat incorrecto {chat_id}")
            bot.reply_to(message, f"‚ö†Ô∏è Este comando solo funciona en el grupo VIP o en chat privado con el bot.")
            return
        
        # Si es en privado, usar el GROUP_CHAT_ID configurado
        target_group_id = GROUP_CHAT_ID if message.chat.type == 'private' else chat_id
        
        # Mensaje inicial
        status_message = bot.reply_to(message, "üîÑ Iniciando verificaci√≥n completa de todos los miembros del grupo...")
        
        # Iniciar verificaci√≥n en un hilo separado para no bloquear
        def verification_thread():
            try:
                # Realizar la verificaci√≥n
                result = perform_group_security_check(bot, target_group_id)
                
                # Actualizar mensaje de estado con el resultado
                if result:
                    bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=status_message.message_id,
                        text="‚úÖ Verificaci√≥n completada exitosamente. Todos los miembros no autorizados han sido expulsados."
                    )
                else:
                    bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=status_message.message_id,
                        text="‚ö†Ô∏è Hubo problemas durante la verificaci√≥n. Revisa los logs para m√°s detalles."
                    )
            except Exception as e:
                logger.error(f"Error en hilo de verificaci√≥n: {e}")
                try:
                    bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=status_message.message_id,
                        text=f"‚ùå Error durante la verificaci√≥n: {str(e)}"
                    )
                except:
                    pass
        
        # Iniciar hilo
        verify_thread = threading.Thread(target=verification_thread)
        verify_thread.daemon = True
        verify_thread.start()
        
    except Exception as e:
        logger.error(f"Error general en handle_verify_all_members: {e}")
        bot.reply_to(message, f"‚ùå Error al iniciar verificaci√≥n: {str(e)}")


# 3. FUNCI√ìN DE VERIFICACI√ìN DE PERMISOS DEL BOT
# A√±ade esta funci√≥n al archivo app.py, justo antes de set_webhook()

def verify_bot_permissions():
    """Verifica que el bot tenga los permisos correctos en el grupo VIP"""
    try:
        from config import GROUP_CHAT_ID, ADMIN_IDS, BOT_TOKEN
        import requests
        import json
        
        if not GROUP_CHAT_ID:
            logger.warning("GROUP_CHAT_ID no est√° configurado, omitiendo verificaci√≥n de permisos")
            return
        
        # Usar la API directamente para evitar circularidad de importaciones
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/getChatMember"
        params = {
            "chat_id": GROUP_CHAT_ID,
            "user_id": bot.get_me().id
        }
        
        response = requests.get(url, params=params)
        data = response.json()
        
        if not data.get("ok"):
            logger.error(f"Error al verificar permisos del bot: {data.get('description')}")
            for admin_id in ADMIN_IDS:
                requests.get(
                    f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
                    params={
                        "chat_id": admin_id,
                        "text": f"‚ö†Ô∏è ALERTA: El bot no puede acceder al grupo VIP (ID: {GROUP_CHAT_ID}).\n\nPor favor, a√±ada el bot al grupo y as√≠gnele permisos de administrador."
                    }
                )
            return
        
        chat_member = data.get("result", {})
        status = chat_member.get("status")
        
        if status not in ["administrator", "creator"]:
            logger.error(f"El bot no es administrador en el grupo VIP. Status: {status}")
            for admin_id in ADMIN_IDS:
                requests.get(
                    f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
                    params={
                        "chat_id": admin_id,
                        "text": f"‚ö†Ô∏è ALERTA: El bot no es administrador en el grupo VIP (ID: {GROUP_CHAT_ID}).\n\nPor favor, haga al bot administrador para que pueda expulsar usuarios no autorizados."
                    }
                )
            return
        
        # Verificar permiso espec√≠fico para expulsar
        can_restrict = chat_member.get("can_restrict_members", False)
        
        if not can_restrict:
            logger.error("El bot es administrador pero no tiene permiso para expulsar miembros")
            for admin_id in ADMIN_IDS:
                requests.get(
                    f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
                    params={
                        "chat_id": admin_id,
                        "text": f"‚ö†Ô∏è ALERTA: El bot es administrador pero NO tiene permiso para EXPULSAR USUARIOS en el grupo VIP.\n\nPor favor, edite los permisos del bot y active 'Expulsar usuarios'."
                    }
                )
            return
        
        logger.info(f"‚úÖ Permisos del bot verificados correctamente: {status}, can_restrict_members: {can_restrict}")
        
    except Exception as e:
        logger.error(f"Error al verificar permisos del bot: {e}")

def handle_new_chat_members(message, bot):
    """Maneja cuando nuevos miembros se unen al grupo"""
    try:
        from config import GROUP_CHAT_ID
        
        # Verificar que sea el grupo VIP
        if str(message.chat.id) != str(GROUP_CHAT_ID):
            return
            
        # Obtener los nuevos miembros
        for new_member in message.new_chat_members:
            # Omitir si es el propio bot
            if new_member.id == bot.get_me().id:
                continue
                
            # Verificar si el usuario tiene suscripci√≥n activa
            user_id = new_member.id
            username = new_member.username or f"User{user_id}"
            
            # Omitir administradores
            if user_id in ADMIN_IDS:
                logger.info(f"Administrador {username} (ID: {user_id}) se uni√≥ al grupo")
                continue
                
            subscription = db.get_active_subscription(user_id)
            
            if not subscription:
                # No tiene suscripci√≥n activa, expulsar
                logger.warning(f"Usuario sin suscripci√≥n detectado al unirse: {username} (ID: {user_id})")
                
                try:
                    # Enviar mensaje al grupo
                    bot.send_message(
                        chat_id=message.chat.id,
                        text=f"üõë SEGURIDAD: Usuario {new_member.first_name} (@{username}) no tiene suscripci√≥n activa y ser√° expulsado autom√°ticamente."
                    )
                    
                    # Expulsar al usuario
                    bot.ban_chat_member(chat_id=message.chat.id, user_id=user_id)
                    
                    # Desbanear inmediatamente para permitir que vuelva a unirse si obtiene suscripci√≥n
                    bot.unban_chat_member(
                        chat_id=message.chat.id,
                        user_id=user_id,
                        only_if_banned=True
                    )
                    
                    # Registrar la expulsi√≥n
                    db.record_expulsion(user_id, "Verificaci√≥n de nuevo miembro - Sin suscripci√≥n activa")
                    
                    # Enviar mensaje privado al usuario
                    try:
                        bot.send_message(
                            chat_id=user_id,
                            text=f"‚ùå Has sido expulsado del grupo VIP porque no tienes una suscripci√≥n activa.\n\nPara unirte, adquiere una suscripci√≥n en @VIPSubscriptionBot con el comando /start."
                        )
                    except Exception as e:
                        logger.error(f"No se pudo enviar mensaje privado a {user_id}: {e}")
                    
                except Exception as e:
                    logger.error(f"Error al expulsar nuevo miembro no autorizado {user_id}: {e}")
            else:
                logger.info(f"Usuario {username} (ID: {user_id}) se uni√≥ al grupo con suscripci√≥n v√°lida")
    
    except Exception as e:
        logger.error(f"Error en handle_new_chat_members: {str(e)}")


# 4. MEJORA EN LA FUNCI√ìN DE REGISTRO DE HANDLERS
# Actualiza esta funci√≥n para incluir el handler /force_verify para uso de admins

def register_handlers(bot):
    """Registra todos los handlers con el bot"""
    # Handler para el comando /start
    bot.register_message_handler(lambda message: handle_start(message, bot), commands=['start'])
    
    # IMPORTANTE: El handler para verify_all debe ir ANTES que otros handlers
    bot.register_message_handler(lambda message: handle_verify_all_members(message, bot), 
                              commands=['verify_all', 'force_verify'])
    
    # Handler para nuevos miembros
    bot.register_message_handler(lambda message: handle_new_chat_members(message, bot), 
                              content_types=['new_chat_members'])
    
    # Handler para el comando de recuperaci√≥n de acceso
    bot.register_message_handler(lambda message: handle_recover_access(message, bot), 
                              func=lambda message: message.text == 'üéüÔ∏è Recuperar Acceso VIP' or 
                                                  message.text == '/recover')
    
    # Handlers para comandos de administrador
    bot.register_message_handler(lambda message: handle_whitelist(message, bot), 
                              func=lambda message: message.from_user.id in ADMIN_IDS and 
                                                  message.text.startswith('/whitelist'))
    
    bot.register_message_handler(lambda message: handle_subinfo(message, bot), 
                              func=lambda message: message.from_user.id in ADMIN_IDS and 
                                                  message.text.startswith('/subinfo'))
    
    # Comando de verificaci√≥n de permisos para admins
    bot.register_message_handler(
        lambda message: verify_bot_permissions() and bot.reply_to(message, "‚úÖ Verificaci√≥n de permisos del bot completada. Revisa los mensajes privados para detalles."),
        func=lambda message: message.from_user.id in ADMIN_IDS and message.text == '/check_permissions'
    )
    
    # Callback handlers para los botones
    bot.register_callback_query_handler(lambda call: handle_main_menu_callback(call, bot), 
                                      func=lambda call: call.data in ['view_plans', 'bot_credits', 'terms'])
    
    bot.register_callback_query_handler(lambda call: handle_plans_callback(call, bot), 
                                      func=lambda call: call.data in ['tutorial', 'weekly_plan', 'monthly_plan', 'back_to_main'])
    
    bot.register_callback_query_handler(lambda call: handle_payment_method(call, bot), 
                                      func=lambda call: call.data.startswith('payment_'))
    
    # Handler por defecto para mensajes no reconocidos
    bot.register_message_handler(lambda message: handle_unknown_message(message, bot), func=lambda message: True)
    
    # Iniciar verificaci√≥n peri√≥dica autom√°tica
    schedule_security_verification(bot)

def handle_start(message, bot):
    """Maneja el comando /start"""
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name
        
        # Guardar usuario en la base de datos
        db.save_user(user_id, username, first_name, last_name)
        
        # Enviar mensaje de bienvenida con botones
        welcome_text = (
            "üëã ¬°Bienvenido al Bot de Suscripciones VIP!\n\n"
            "Este es un grupo exclusivo con contenido premium y acceso limitado.\n\n"
            "Selecciona una opci√≥n üëá"
        )
        
        bot.send_message(
            chat_id=user_id,
            text=welcome_text,
            parse_mode='Markdown',
            reply_markup=create_main_menu_markup()
        )
        
        logger.info(f"Usuario {user_id} ({username}) ha iniciado el bot")
    
    except Exception as e:
        logger.error(f"Error en handle_start: {str(e)}")
        bot.send_message(
            chat_id=message.chat.id,
            text="‚ùå Ocurri√≥ un error. Por favor, intenta nuevamente m√°s tarde."
        )

def handle_main_menu_callback(call, bot):
    """Maneja los callbacks del men√∫ principal"""
    try:
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        
        if call.data == "view_plans":
            # Editar mensaje para mostrar planes
            show_plans(bot, chat_id, message_id)
            
        elif call.data == "bot_credits":
            # Mostrar cr√©ditos del bot
            credits_text = (
                "üß† *Cr√©ditos del Bot*\n\n"
                "Este bot fue desarrollado por el equipo de desarrollo VIP.\n\n"
                "¬© 2025 Todos los derechos reservados.\n\n"
                "Para contacto o soporte: @admin_support"
            )
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô Volver", callback_data="back_to_main"))
            
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=credits_text,
                parse_mode='Markdown',
                reply_markup=markup
            )
            
        elif call.data == "terms":
            # Mostrar t√©rminos de uso
            try:
                with open(os.path.join('static', 'terms.txt'), 'r', encoding='utf-8') as f:
                    terms_text = f.read()
            except:
                terms_text = (
                    "üìú *T√©rminos de Uso*\n\n"
                    "1. El contenido del grupo VIP es exclusivo para suscriptores.\n"
                    "2. No se permiten reembolsos una vez activada la suscripci√≥n.\n"
                    "3. Est√° prohibido compartir el enlace de invitaci√≥n.\n"
                    "4. No se permite redistribuir el contenido fuera del grupo.\n"
                    "5. El incumplimiento de estas normas resultar√° en expulsi√≥n sin reembolso.\n\n"
                    "Al suscribirte, aceptas estos t√©rminos."
                )
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô Volver", callback_data="back_to_main"))
            
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=terms_text,
                parse_mode='Markdown',
                reply_markup=markup
            )
        
        # Responder al callback para quitar el "reloj de espera" en el cliente
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"Error en handle_main_menu_callback: {str(e)}")
        try:
            bot.answer_callback_query(call.id, "‚ùå Ocurri√≥ un error. Intenta nuevamente.")
        except:
            pass

def show_plans(bot, chat_id, message_id=None):
    """Muestra los planes de suscripci√≥n disponibles"""
    try:
        plans_text = (
            "üí∏ Escoge tu plan de suscripci√≥n:\n\n"
            "üîπ Plan Semanal: $3.50 / 1 semana\n"
            "üî∏ Plan Mensual: $5.00 / 1 mes\n\n"
            "üßë‚Äçüè´ ¬øNo sabes c√≥mo pagar? Mira el tutorial üëá"
        )
        
        markup = create_plans_markup()
        
        if message_id:
            # Editar mensaje existente
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=plans_text,
                parse_mode='Markdown',
                reply_markup=markup
            )
        else:
            # Enviar nuevo mensaje
            bot.send_message(
                chat_id=chat_id,
                text=plans_text,
                parse_mode='Markdown',
                reply_markup=markup
            )
        
        logger.info(f"Se mostraron planes al usuario {chat_id}")
        
    except Exception as e:
        logger.error(f"Error en show_plans: {str(e)}")
        try:
            if message_id:
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text="‚ùå Ocurri√≥ un error al mostrar los planes. Por favor, intenta nuevamente con /start."
                )
            else:
                bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå Ocurri√≥ un error al mostrar los planes. Por favor, intenta nuevamente con /start."
                )
        except:
            pass

def show_plan_details(bot, chat_id, message_id, plan_id):
    """Muestra los detalles de un plan espec√≠fico"""
    try:
        plan = PLANS.get(plan_id)
        if not plan:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="‚ùå Plan no encontrado. Por favor, intenta nuevamente."
            )
            return
        
        # Construir mensaje con detalles del plan
        plan_text = (
            f"üì¶ {plan['display_name']}\n\n"
            f"{plan['description']}\n"
            f"Beneficios:\n"
            f"‚úÖ Grupo VIP (Acceso)\n"
            f"‚úÖ 21,000 archivos exclusivos üìÅ\n\n"
            f"üíµ Precio: ${plan['price_usd']:.2f} USD\n"
            f"üìÜ Facturaci√≥n: {'semanal' if plan_id == 'weekly' else 'mensual'} (recurrente)\n\n"
            f"Selecciona un m√©todo de pago üëá"
        )
        
        # Crear markup con botones de pago
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("üÖøÔ∏è Pagar con PayPal", callback_data=f"payment_paypal_{plan_id}"),
            types.InlineKeyboardButton("üîô Atr√°s", callback_data="view_plans")
        )
        
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=plan_text,
            parse_mode='Markdown',
            reply_markup=markup
        )
        
        logger.info(f"Usuario {chat_id} est√° viendo detalles del plan {plan_id}")
        
    except Exception as e:
        logger.error(f"Error en show_plan_details: {str(e)}")
        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="‚ùå Ocurri√≥ un error al mostrar los detalles del plan. Por favor, intenta nuevamente."
            )
        except:
            pass

def show_payment_tutorial(bot, chat_id, message_id):
    """Muestra el tutorial de pagos"""
    try:
        tutorial_text = (
            "üé• *Tutorial de Pagos*\n\n"
            "Para suscribirte a nuestro grupo VIP, sigue estos pasos:\n\n"
            "1Ô∏è‚É£ Selecciona el plan que deseas (Semanal o Mensual)\n\n"
            "2Ô∏è‚É£ Haz clic en 'Pagar con PayPal'\n\n"
            "3Ô∏è‚É£ Ser√°s redirigido a la p√°gina de PayPal donde puedes pagar con:\n"
            "   - Cuenta de PayPal\n"
            "   - Tarjeta de cr√©dito/d√©bito (sin necesidad de cuenta)\n\n"
            "4Ô∏è‚É£ Completa el pago y regresa a Telegram\n\n"
            "5Ô∏è‚É£ Recibir√°s un enlace de invitaci√≥n al grupo VIP\n\n"
            "‚ö†Ô∏è Importante: Tu suscripci√≥n se renovar√° autom√°ticamente. Puedes cancelarla en cualquier momento desde tu cuenta de PayPal."
        )
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô Volver a los Planes", callback_data="view_plans"))
        
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=tutorial_text,
            parse_mode='Markdown',
            reply_markup=markup
        )
        
        logger.info(f"Usuario {chat_id} est√° viendo el tutorial de pagos")
        
    except Exception as e:
        logger.error(f"Error en show_payment_tutorial: {str(e)}")
        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="‚ùå Ocurri√≥ un error al mostrar el tutorial. Por favor, intenta nuevamente."
            )
        except:
            pass

def handle_plans_callback(call, bot):
    """Maneja los callbacks relacionados con la selecci√≥n de planes"""
    try:
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        
        if call.data == "tutorial":
            # Mostrar tutorial de pagos
            show_payment_tutorial(bot, chat_id, message_id)
            
        elif call.data == "weekly_plan":
            # Mostrar detalles del plan semanal
            show_plan_details(bot, chat_id, message_id, "weekly")
            
        elif call.data == "monthly_plan":
            # Mostrar detalles del plan mensual
            show_plan_details(bot, chat_id, message_id, "monthly")
            
        elif call.data == "view_plans":
            # Volver a la vista de planes
            show_plans(bot, chat_id, message_id)
            
        elif call.data == "back_to_main":
            # Volver al men√∫ principal
            welcome_text = (
                "üëã ¬°Bienvenido al Bot de Suscripciones VIP!\n\n"
                "Este es un grupo exclusivo con contenido premium y acceso limitado.\n\n"
                "Selecciona una opci√≥n üëá"
            )
            
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=welcome_text,
                parse_mode='Markdown',
                reply_markup=create_main_menu_markup()
            )
        
        # Responder al callback para quitar el "reloj de espera" en el cliente
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"Error en handle_plans_callback: {str(e)}")
        try:
            bot.answer_callback_query(call.id, "‚ùå Ocurri√≥ un error. Intenta nuevamente.")
        except:
            pass

def handle_payment_method(call, bot):
    """Maneja la selecci√≥n del m√©todo de pago"""
    try:
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        user_id = call.from_user.id
        
        # Extraer el m√©todo de pago y plan del callback data
        _, method, plan_id = call.data.split('_')
        
        if method == "paypal":
            # Mostrar animaci√≥n de "procesando"
            processing_message = bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="üîÑ Preparando pago...\nAguarde por favor...",
                reply_markup=None
            )
            
            # Iniciar animaci√≥n de "procesando"
            animation_thread = threading.Thread(
                target=start_processing_animation,
                args=(bot, chat_id, processing_message.message_id)
            )
            animation_thread.daemon = True
            animation_thread.start()
            
            # Crear enlace de suscripci√≥n de PayPal
            subscription_url = pay.create_subscription_link(plan_id, user_id)
            
            # Detener la animaci√≥n
            if chat_id in payment_animations:
                payment_animations[chat_id]['active'] = False
            
            if subscription_url:
                # Crear markup con bot√≥n para pagar
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("üí≥ Ir a pagar", url=subscription_url),
                    types.InlineKeyboardButton("üîô Cancelar", callback_data="view_plans")
                )
                
                # Actualizar mensaje con el enlace de pago
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=processing_message.message_id,
                    text=(
                        "üîó *Tu enlace de pago est√° listo*\n\n"
                        f"Plan: {PLANS[plan_id]['display_name']}\n"
                        f"Precio: ${PLANS[plan_id]['price_usd']:.2f} USD / "
                        f"{'semana' if plan_id == 'weekly' else 'mes'}\n\n"
                        "Por favor, haz clic en el bot√≥n de abajo para completar tu pago con PayPal.\n"
                        "Una vez completado, ser√°s redirigido de vuelta aqu√≠."
                    ),
                    parse_mode='Markdown',
                    reply_markup=markup
                )
                
                logger.info(f"Enlace de pago PayPal creado para usuario {user_id}, plan {plan_id}")
            else:
                # Error al crear enlace de pago
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô Volver", callback_data="view_plans"))
                
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=processing_message.message_id,
                    text=(
                        "‚ùå *Error al crear enlace de pago*\n\n"
                        "Lo sentimos, no pudimos procesar tu solicitud en este momento.\n"
                        "Por favor, intenta nuevamente m√°s tarde o contacta a soporte."
                    ),
                    parse_mode='Markdown',
                    reply_markup=markup
                )
                
                logger.error(f"Error al crear enlace de pago PayPal para usuario {user_id}, plan {plan_id}")
        
        # Responder al callback para quitar el "reloj de espera" en el cliente
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"Error en handle_payment_method: {str(e)}")
        try:
            bot.answer_callback_query(call.id, "‚ùå Ocurri√≥ un error. Intenta nuevamente.")
            
            # Detener cualquier animaci√≥n en curso
            if chat_id in payment_animations:
                payment_animations[chat_id]['active'] = False
                
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô Volver", callback_data="view_plans"))
                
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=payment_animations[chat_id]['message_id'],
                    text="‚ùå Ocurri√≥ un error. Por favor, intenta nuevamente.",
                    reply_markup=markup
                )
        except:
            pass

def handle_recover_access(message, bot):
    """Maneja la solicitud de recuperaci√≥n de acceso VIP"""
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # Verificar si el usuario tiene una suscripci√≥n activa
        subscription = db.get_active_subscription(user_id)
        
        if not subscription:
            # No tiene suscripci√≥n activa
            no_subscription_text = (
                "‚ùå *No tienes una suscripci√≥n activa*\n\n"
                "Para acceder al grupo VIP, necesitas adquirir una suscripci√≥n.\n"
                "Usa el comando /start para ver nuestros planes disponibles."
            )
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üì¶ Ver Planes", callback_data="view_plans"))
            
            bot.send_message(
                chat_id=chat_id,
                text=no_subscription_text,
                parse_mode='Markdown',
                reply_markup=markup
            )
            
            logger.info(f"Usuario {user_id} intent√≥ recuperar acceso sin suscripci√≥n activa")
            return
        
        # Tiene suscripci√≥n activa, verificar si tiene un enlace de invitaci√≥n v√°lido
        link = db.get_active_invite_link(subscription['sub_id'])
        
        if link:
            # Tiene un enlace activo, enviarlo
            recovery_text = (
                "üéüÔ∏è *Recuperaci√≥n de Acceso VIP*\n\n"
                "Aqu√≠ tienes tu enlace de invitaci√≥n al grupo VIP:\n"
                f"üîó [√önete al Grupo VIP]({link['invite_link']})\n\n"
                f"‚ö†Ô∏è Este enlace expira el {datetime.datetime.fromisoformat(link['expires_at']).strftime('%d %b %Y %I:%M %p')} "
                "o despu√©s de un solo uso."
            )
            
            bot.send_message(
                chat_id=chat_id,
                text=recovery_text,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            
            logger.info(f"Usuario {user_id} recuper√≥ su enlace de acceso existente")
        else:
            # No tiene un enlace activo, generar uno nuevo
            invite_link = generate_invite_link(bot, user_id, subscription['sub_id'])
            
            if invite_link:
                # Enlace generado correctamente
                new_link_text = (
                    "üéüÔ∏è *Nuevo Acceso VIP Generado*\n\n"
                    "Hemos creado un nuevo enlace de invitaci√≥n para ti:\n"
                    f"üîó [√önete al Grupo VIP]({invite_link})\n\n"
                    "‚ö†Ô∏è Este enlace expira en 24 horas o despu√©s de un solo uso."
                )
                
                bot.send_message(
                    chat_id=chat_id,
                    text=new_link_text,
                    parse_mode='Markdown',
                    disable_web_page_preview=True
                )
                
                logger.info(f"Usuario {user_id} gener√≥ un nuevo enlace de acceso")
            else:
                # Error al generar el enlace
                error_text = (
                    "‚ùå *Error al generar enlace*\n\n"
                    "No pudimos generar un nuevo enlace de invitaci√≥n en este momento.\n"
                    "Por favor, contacta a soporte para recibir asistencia."
                )
                
                bot.send_message(
                    chat_id=chat_id,
                    text=error_text,
                    parse_mode='Markdown'
                )
                
                logger.error(f"Error al generar nuevo enlace para usuario {user_id}")
    
    except Exception as e:
        logger.error(f"Error en handle_recover_access: {str(e)}")
        bot.send_message(
            chat_id=message.chat.id,
            text="‚ùå Ocurri√≥ un error al procesar tu solicitud. Por favor, intenta nuevamente m√°s tarde."
        )

def handle_whitelist(message, bot):
    """Maneja el comando /whitelist para agregar un usuario a la whitelist manualmente"""
    try:
        admin_id = message.from_user.id
        chat_id = message.chat.id
        
        # Verificar que sea un administrador
        if admin_id not in ADMIN_IDS:
            bot.send_message(
                chat_id=chat_id,
                text="‚õî No tienes permisos para usar este comando."
            )
            return
        
        # Extraer el ID de usuario del comando
        command_parts = message.text.split()
        
        if len(command_parts) < 2:
            bot.send_message(
                chat_id=chat_id,
                text="‚ùå Uso incorrecto. Por favor, usa /whitelist USER_ID"
            )
            return
        
        try:
            target_user_id = int(command_parts[1])
        except ValueError:
            bot.send_message(
                chat_id=chat_id,
                text="‚ùå ID de usuario inv√°lido. Debe ser un n√∫mero."
            )
            return
        
        # Obtener informaci√≥n del usuario
        user = db.get_user(target_user_id)
        
        # Si el usuario no existe en la BD, guardar con informaci√≥n m√≠nima
        if not user:
            db.save_user(target_user_id)
            user = {'user_id': target_user_id, 'username': None, 'first_name': None, 'last_name': None}
        
        # Preparar mensaje de confirmaci√≥n
        username_display = user.get('username', 'Sin username')
        first_name = user.get('first_name', '')
        last_name = user.get('last_name', '')
        full_name = f"{first_name} {last_name}".strip() or "Sin nombre"
        
        confirmation_text = (
            "üõ°Ô∏è Administraci√≥n:\n\n"
            "¬øAgregar a:\n"
            f"üë§ {full_name} (@{username_display})\n"
            f"üÜî {target_user_id} ?\n\n"
            "‚è±Ô∏è Define duraci√≥n: (`7 days`, `1 month`, ‚Ä¶)"
        )
        
        # Guardar estado para esperar la respuesta con la duraci√≥n
        admin_states[admin_id] = {
            'action': 'whitelist',
            'target_user_id': target_user_id,
            'message_id': None
        }
        
        # Enviar mensaje de confirmaci√≥n
        sent_message = bot.send_message(
            chat_id=chat_id,
            text=confirmation_text,
            parse_mode='Markdown'
        )
        
        # Guardar ID del mensaje enviado
        admin_states[admin_id]['message_id'] = sent_message.message_id
        
        # Registrar el pr√≥ximo paso: esperar duraci√≥n
        bot.register_next_step_handler(message, lambda msg: handle_whitelist_duration(msg, bot))
        
    except Exception as e:
        logger.error(f"Error en handle_whitelist: {str(e)}")
        bot.send_message(
            chat_id=message.chat.id,
            text="‚ùå Ocurri√≥ un error al procesar tu solicitud. Por favor, intenta nuevamente."
        )

def handle_whitelist_duration(message, bot):
    """Procesa la duraci√≥n para la whitelist"""
    try:
        admin_id = message.from_user.id
        chat_id = message.chat.id
        
        # Verificar que el admin tenga un estado pendiente
        if admin_id not in admin_states or admin_states[admin_id]['action'] != 'whitelist':
            bot.send_message(
                chat_id=chat_id,
                text="‚ùå No hay una solicitud de whitelist pendiente. Usa /whitelist USER_ID para comenzar."
            )
            return
        
        # Extraer la duraci√≥n del mensaje
        duration_text = message.text.strip().lower()
        
        # Parsear la duraci√≥n
        days = parse_duration(duration_text)
        
        if days is None:
            bot.send_message(
                chat_id=chat_id,
                text=(
                    "‚ùå Formato de duraci√≥n no reconocido.\n"
                    "Ejemplos v√°lidos: '7 days', '1 week', '1 month', '3 months'"
                )
            )
            # Volver a solicitar la duraci√≥n
            bot.register_next_step_handler(message, lambda msg: handle_whitelist_duration(msg, bot))
            return
        
        # Obtener informaci√≥n del estado
        target_user_id = admin_states[admin_id]['target_user_id']
        
        # Calcular fechas
        start_date = datetime.datetime.now()
        end_date = start_date + datetime.timedelta(days=days)
        
        # Determinar el plan m√°s cercano
        plan_id = 'weekly' if days <= 7 else 'monthly'
        
        # Crear suscripci√≥n en la base de datos
        sub_id = db.create_subscription(
            user_id=target_user_id,
            plan=plan_id,
            price_usd=0.00,  # Gratis por ser whitelist
            start_date=start_date,
            end_date=end_date,
            status='ACTIVE',
            paypal_sub_id=None
        )
        
        # Generar enlace de invitaci√≥n
        invite_link = generate_invite_link(bot, target_user_id, sub_id)
        
        # Enviar mensaje de confirmaci√≥n
        confirmation_text = (
            "‚úÖ *Usuario agregado a la whitelist exitosamente*\n\n"
            f"üë§ ID: {target_user_id}\n"
            f"üìÜ Duraci√≥n: {days} d√≠as\n"
            f"üóìÔ∏è Expira: {end_date.strftime('%d %b %Y')}\n"
        )
        
        if invite_link:
            confirmation_text += f"\nüîó [Enlace de invitaci√≥n]({invite_link})"
        
        bot.send_message(
            chat_id=chat_id,
            text=confirmation_text,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        
        # Notificar al usuario
        try:
            user_notification = (
                "üéüÔ∏è *¬°Has sido agregado al grupo VIP!*\n\n"
                f"Un administrador te ha concedido acceso por {days} d√≠as.\n\n"
            )
            
            if invite_link:
                user_notification += f"Aqu√≠ tienes tu enlace de invitaci√≥n:\nüîó [√önete al Grupo VIP]({invite_link})"
            
            bot.send_message(
                chat_id=target_user_id,
                text=user_notification,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.error(f"Error al notificar al usuario {target_user_id}: {str(e)}")
            
            # Informar al admin que no se pudo notificar
            bot.send_message(
                chat_id=chat_id,
                text=f"‚ö†Ô∏è No se pudo notificar al usuario. Es posible que no haya iniciado el bot."
            )
        
        # Limpiar el estado
        del admin_states[admin_id]
        
        logger.info(f"Admin {admin_id} agreg√≥ a usuario {target_user_id} a la whitelist por {days} d√≠as")
        
    except Exception as e:
        logger.error(f"Error en handle_whitelist_duration: {str(e)}")
        bot.send_message(
            chat_id=message.chat.id,
            text="‚ùå Ocurri√≥ un error al procesar la duraci√≥n. Por favor, intenta nuevamente con /whitelist."
        )

def handle_subinfo(message, bot):
    """Maneja el comando /subinfo para mostrar informaci√≥n de suscripci√≥n de un usuario"""
    try:
        admin_id = message.from_user.id
        chat_id = message.chat.id
        
        # Verificar que sea un administrador
        if admin_id not in ADMIN_IDS:
            bot.send_message(
                chat_id=chat_id,
                text="‚õî No tienes permisos para usar este comando."
            )
            return
        
        # Extraer el ID de usuario del comando
        command_parts = message.text.split()
        
        if len(command_parts) < 2:
            bot.send_message(
                chat_id=chat_id,
                text="‚ùå Uso incorrecto. Por favor, usa /subinfo USER_ID"
            )
            return
        
        try:
            target_user_id = int(command_parts[1])
        except ValueError:
            bot.send_message(
                chat_id=chat_id,
                text="‚ùå ID de usuario inv√°lido. Debe ser un n√∫mero."
            )
            return
        
        # Obtener informaci√≥n del usuario
        user = db.get_user(target_user_id)
        
        if not user:
            bot.send_message(
                chat_id=chat_id,
                text=f"‚ùå Usuario con ID {target_user_id} no encontrado en la base de datos."
            )
            return
        
        # Obtener suscripci√≥n del usuario
        subscription = db.get_subscription_by_user_id(target_user_id)
        
        if not subscription:
            bot.send_message(
                chat_id=chat_id,
                text=f"‚ùå El usuario {target_user_id} no tiene ninguna suscripci√≥n registrada."
            )
            return
        
        # Preparar informaci√≥n a mostrar
        username_display = user.get('username', 'Sin username')
        first_name = user.get('first_name', '')
        last_name = user.get('last_name', '')
        full_name = f"{first_name} {last_name}".strip() or "Sin nombre"
        
        status = subscription['status']
        status_emoji = "üü¢" if status == "ACTIVE" else "üî¥"
        
        start_date = datetime.datetime.fromisoformat(subscription['start_date'])
        end_date = datetime.datetime.fromisoformat(subscription['end_date'])
        
        plan_id = subscription['plan']
        plan_name = PLANS.get(plan_id, {}).get('display_name', plan_id)
        
        payment_method = "PayPal" if subscription['paypal_sub_id'] else "Manual (Whitelist)"
        
        # Crear mensaje con la informaci√≥n
        info_text = (
            f"üë§ ID: {target_user_id}\n"
            f"üßë Nombre: {full_name} (@{username_display})\n"
            f"üìä Estado: {status_emoji} {status}\n\n"
            f"üì• Plan: {plan_name}\n"
            f"üóìÔ∏è Inicio: {start_date.strftime('%d %b %Y')}\n"
            f"‚è≥ Expira: {end_date.strftime('%d %b %Y')}\n\n"
            f"üí≥ Pagos: {payment_method}\n"
        )
        
        if subscription['paypal_sub_id']:
            info_text += f"Subscription ID: {subscription['paypal_sub_id']}"
        
        # Enviar mensaje con la informaci√≥n
        bot.send_message(
            chat_id=chat_id,
            text=info_text,
            parse_mode='Markdown'
        )
        
        logger.info(f"Admin {admin_id} consult√≥ informaci√≥n de suscripci√≥n del usuario {target_user_id}")
        
    except Exception as e:
        logger.error(f"Error en handle_subinfo: {str(e)}")
        bot.send_message(
            chat_id=message.chat.id,
            text="‚ùå Ocurri√≥ un error al consultar la informaci√≥n. Por favor, intenta nuevamente."
        )

def handle_unknown_message(message, bot):
    """Maneja mensajes que no coinciden con ning√∫n comando conocido"""
    try:
        bot.send_message(
            chat_id=message.chat.id,
            text="No entiendo ese comando. Por favor, usa /start para ver las opciones disponibles."
        )
    except Exception as e:
        logger.error(f"Error en handle_unknown_message: {str(e)}")

def register_handlers(bot):
    """Registra todos los handlers con el bot"""
    # Handler para el comando /start
    bot.register_message_handler(lambda message: handle_start(message, bot), commands=['start'])
    
    # Handler para el comando de recuperaci√≥n de acceso
    bot.register_message_handler(lambda message: handle_recover_access(message, bot), 
                              func=lambda message: message.text == 'üéüÔ∏è Recuperar Acceso VIP' or 
                                                  message.text == '/recover')
    
    # Handlers para comandos de administrador
    bot.register_message_handler(lambda message: handle_whitelist(message, bot), 
                              func=lambda message: message.from_user.id in ADMIN_IDS and 
                                                  message.text.startswith('/whitelist'))
    
    bot.register_message_handler(lambda message: handle_subinfo(message, bot), 
                              func=lambda message: message.from_user.id in ADMIN_IDS and 
                                                  message.text.startswith('/subinfo'))
    
    # Callback handlers para los botones
    bot.register_callback_query_handler(lambda call: handle_main_menu_callback(call, bot), 
                                      func=lambda call: call.data in ['view_plans', 'bot_credits', 'terms'])
    
    bot.register_callback_query_handler(lambda call: handle_plans_callback(call, bot), 
                                      func=lambda call: call.data in ['tutorial', 'weekly_plan', 'monthly_plan', 'back_to_main'])
    
    bot.register_callback_query_handler(lambda call: handle_payment_method(call, bot), 
                                      func=lambda call: call.data.startswith('payment_'))
    
    # Handler por defecto para mensajes no reconocidos
    bot.register_message_handler(lambda message: handle_unknown_message(message, bot), func=lambda message: True)