import telebot
from telebot import types
import logging
import threading
import time
import datetime
from typing import Dict, Optional
import database as db
import payments as pay
from config import PLANS, ADMIN_IDS, INVITE_LINK_EXPIRY_HOURS, INVITE_LINK_MEMBER_LIMIT

# Obtener la instancia del bot
from app import bot

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Diccionario para almacenar las animaciones de pago en curso
payment_animations = {}

def handle_payment_method(call):
    """Maneja la selecci√≥n del m√©todo de pago"""
    try:
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        user_id = call.from_user.id
        
        # Extraer el m√©todo de pago y plan del callback data
        _, method, plan_id = call.data.split('_')
        
        if method == "paypal":
            # Mostrar animaci√≥n de "procesando"
            processing_message = bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="üîÑ Preparando pago...\nAguarde por favor...",
                reply_markup=None
            )
            
            # Iniciar animaci√≥n de "procesando"
            animation_thread = threading.Thread(
                target=start_processing_animation,
                args=(chat_id, processing_message.message_id)
            )
            animation_thread.daemon = True
            animation_thread.start()
            
            # Registrar la animaci√≥n
            payment_animations[chat_id] = {
                'active': True,
                'message_id': processing_message.message_id
            }
            
            # Crear enlace de suscripci√≥n de PayPal
            subscription_url = pay.create_subscription_link(plan_id, user_id)
            
            # Detener la animaci√≥n
            payment_animations[chat_id]['active'] = False
            
            if subscription_url:
                # Crear markup con bot√≥n para pagar
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("üí≥ Ir a pagar", url=subscription_url),
                    types.InlineKeyboardButton("üîô Cancelar", callback_data="view_plans")
                )
                
                # Actualizar mensaje con el enlace de pago
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=processing_message.message_id,
                    text=(
                        "üîó *Tu enlace de pago est√° listo*\n\n"
                        f"Plan: {PLANS[plan_id]['display_name']}\n"
                        f"Precio: ${PLANS[plan_id]['price_usd']:.2f} USD / "
                        f"{'semana' if plan_id == 'weekly' else 'mes'}\n\n"
                        "Por favor, haz clic en el bot√≥n de abajo para completar tu pago con PayPal.\n"
                        "Una vez completado, ser√°s redirigido de vuelta aqu√≠."
                    ),
                    parse_mode='Markdown',
                    reply_markup=markup
                )
                
                logger.info(f"Enlace de pago PayPal creado para usuario {user_id}, plan {plan_id}")
            else:
                # Error al crear enlace de pago
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô Volver", callback_data="view_plans"))
                
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=processing_message.message_id,
                    text=(
                        "‚ùå *Error al crear enlace de pago*\n\n"
                        "Lo sentimos, no pudimos procesar tu solicitud en este momento.\n"
                        "Por favor, intenta nuevamente m√°s tarde o contacta a soporte."
                    ),
                    parse_mode='Markdown',
                    reply_markup=markup
                )
                
                logger.error(f"Error al crear enlace de pago PayPal para usuario {user_id}, plan {plan_id}")
        
        # Responder al callback para quitar el "reloj de espera" en el cliente
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"Error en handle_payment_method: {str(e)}")
        try:
            bot.answer_callback_query(call.id, "‚ùå Ocurri√≥ un error. Intenta nuevamente.")
            
            # Detener cualquier animaci√≥n en curso
            if chat_id in payment_animations:
                payment_animations[chat_id]['active'] = False
                
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô Volver", callback_data="view_plans"))
                
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=payment_animations[chat_id]['message_id'],
                    text="‚ùå Ocurri√≥ un error. Por favor, intenta nuevamente.",
                    reply_markup=markup
                )
        except:
            pass

def start_processing_animation(chat_id, message_id):
    """Inicia una animaci√≥n de procesamiento en el mensaje"""
    try:
        animation_markers = ['/', '-', '|', '\\']
        current_index = 0
        
        while chat_id in payment_animations and payment_animations[chat_id]['active']:
            try:
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=(
                        "üîÑ Confirmando Pago\n"
                        f"      {animation_markers[current_index]}      \n"
                        "Aguarde por favor..."
                    )
                )
                
                # Actualizar √≠ndice de animaci√≥n
                current_index = (current_index + 1) % len(animation_markers)
                
                # Esperar antes de la siguiente actualizaci√≥n
                time.sleep(0.5)
            except Exception as e:
                logger.error(f"Error en animaci√≥n: {str(e)}")
                break
    except Exception as e:
        logger.error(f"Error en start_processing_animation: {str(e)}")

def process_successful_subscription(user_id: int, plan_id: str, paypal_sub_id: str, 
                                   subscription_details: Dict) -> bool:
    """Procesa una suscripci√≥n exitosa"""
    try:
        # Obtener detalles del plan
        plan = PLANS.get(plan_id)
        if not plan:
            logger.error(f"Plan no encontrado: {plan_id}")
            return False
        
        # Obtener informaci√≥n del usuario
        user = db.get_user(user_id)
        if not user:
            # Guardar usuario con informaci√≥n m√≠nima si no existe
            db.save_user(user_id)
            user = {'user_id': user_id, 'username': None, 'first_name': None, 'last_name': None}
        
        # Calcular fechas
        start_date = datetime.datetime.now()
        end_date = start_date + datetime.timedelta(days=plan['duration_days'])
        
        # Crear suscripci√≥n en la base de datos
        sub_id = db.create_subscription(
            user_id=user_id,
            plan=plan_id,
            price_usd=plan['price_usd'],
            start_date=start_date,
            end_date=end_date,
            status='ACTIVE',
            paypal_sub_id=paypal_sub_id
        )
        
        # Generar enlace de invitaci√≥n
        invite_link = generate_invite_link(user_id, sub_id)
        
        if not invite_link:
            logger.error(f"No se pudo generar enlace de invitaci√≥n para usuario {user_id}")
            # A√∫n continuamos con el proceso, solo que sin enlace
        
        # Enviar mensaje de confirmaci√≥n al usuario
        confirmation_text = (
            "üéüÔ∏è ¬°Acceso VIP Confirmado!\n\n"
            "Aqu√≠ tienes tu acceso exclusivo üëá\n"
        )
        
        if invite_link:
            confirmation_text += f"üîó [√önete al Grupo VIP]({invite_link})\n\n"
            confirmation_text += f"‚ö†Ô∏è Nota: El enlace expira en {INVITE_LINK_EXPIRY_HOURS} horas o tras un solo uso."
        else:
            confirmation_text += "‚ùå No se pudo generar el enlace de invitaci√≥n. Por favor, contacta a soporte."
        
        bot.send_message(
            chat_id=user_id,
            text=confirmation_text,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        
        # Notificar a los administradores
        username_display = user.get('username', 'Sin username')
        first_name = user.get('first_name', '')
        last_name = user.get('last_name', '')
        full_name = f"{first_name} {last_name}".strip() or "Sin nombre"
        
        admin_notification = (
            "üéâ ¬°Nueva Suscripci√≥n! (PayPal)\n\n"
            "Detalles:\n"
            f"‚Ä¢ ID pago: {paypal_sub_id}\n"
            f"‚Ä¢ Usuario: {username_display} (@{username_display}) (id{user_id})\n"
            f"‚Ä¢ Nombre: {full_name}\n"
            f"‚Ä¢ Plan: {plan['display_name']}\n"
            f"‚Ä¢ Facturaci√≥n: ${plan['price_usd']:.2f} / "
            f"{'1 semana' if plan_id == 'weekly' else '1 mes'}\n"
            f"‚Ä¢ Fecha: {start_date.strftime('%d %b %Y %I:%M %p')}\n"
            f"‚Ä¢ Expira: {end_date.strftime('%d %b %Y')}\n"
            f"‚Ä¢ Estado: ‚úÖ ACTIVO"
        )
        
        for admin_id in ADMIN_IDS:
            try:
                bot.send_message(
                    chat_id=admin_id,
                    text=admin_notification,
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Error al notificar al admin {admin_id}: {str(e)}")
        
        logger.info(f"Suscripci√≥n exitosa procesada para usuario {user_id}, plan {plan_id}")
        return True
        
    except Exception as e:
        logger.error(f"Error en process_successful_subscription: {str(e)}")
        return False

def generate_invite_link(user_id: int, sub_id: int) -> Optional[str]:
    """Genera un enlace de invitaci√≥n para el grupo VIP"""
    try:
        from utils.invite_link import create_invite_link
        
        # Crear enlace con expiraci√≥n y l√≠mite de miembros
        invite_link = create_invite_link(user_id, sub_id)
        
        if invite_link:
            logger.info(f"Enlace de invitaci√≥n generado para usuario {user_id}")
            return invite_link
        else:
            logger.error(f"No se pudo generar enlace de invitaci√≥n para usuario {user_id}")
            return None
            
    except Exception as e:
        logger.error(f"Error en generate_invite_link: {str(e)}")
        return None

def update_subscription_from_webhook(event_data: Dict) -> bool:
    """Actualiza la suscripci√≥n en la base de datos seg√∫n el evento de webhook de PayPal"""
    try:
        event_type = event_data.get("event_type")
        resource = event_data.get("resource", {})
        subscription_id = resource.get("id")
        
        if not subscription_id:
            logger.error("Evento de webhook sin ID de suscripci√≥n")
            return False
        
        # Obtener la suscripci√≥n de la base de datos
        subscription = db.get_subscription_by_paypal_id(subscription_id)
        if not subscription:
            logger.error(f"Suscripci√≥n no encontrada para PayPal ID: {subscription_id}")
            return False
        
        sub_id = subscription['sub_id']
        user_id = subscription['user_id']
        
        # Manejar los diferentes tipos de eventos
        if event_type == "BILLING.SUBSCRIPTION.ACTIVATED":
            # Marcar la suscripci√≥n como activa
            db.update_subscription_status(sub_id, "ACTIVE")
            logger.info(f"Suscripci√≥n {sub_id} activada")
            
        elif event_type == "BILLING.SUBSCRIPTION.UPDATED":
            # Verificar si hay cambios en la fecha de expiraci√≥n
            # Esto depender√° de la estructura exacta del evento
            pass
            
        elif event_type == "BILLING.SUBSCRIPTION.CANCELLED":
            # Marcar la suscripci√≥n como cancelada
            db.update_subscription_status(sub_id, "CANCELLED")
            
            # Intentar expulsar al usuario del grupo
            try:
                from utils.invite_link import remove_user_from_group
                remove_user_from_group(user_id, "Suscripci√≥n cancelada")
            except Exception as e:
                logger.error(f"Error al expulsar al usuario {user_id}: {str(e)}")
            
            # Notificar al usuario
            try:
                bot.send_message(
                    chat_id=user_id,
                    text=(
                        "‚ùå *Tu suscripci√≥n ha sido cancelada*\n\n"
                        "Has sido expulsado del grupo VIP. Si deseas volver a suscribirte, "
                        "utiliza el comando /start para ver nuestros planes disponibles."
                    ),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Error al notificar cancelaci√≥n al usuario {user_id}: {str(e)}")
            
            logger.info(f"Suscripci√≥n {sub_id} cancelada")
            
        elif event_type == "BILLING.SUBSCRIPTION.SUSPENDED":
            # Marcar la suscripci√≥n como suspendida
            db.update_subscription_status(sub_id, "SUSPENDED")
            
            # Notificar al usuario
            try:
                bot.send_message(
                    chat_id=user_id,
                    text=(
                        "‚ö†Ô∏è *Tu suscripci√≥n ha sido suspendida*\n\n"
                        "Tu acceso al grupo VIP puede verse afectado. Por favor, verifica tu m√©todo de pago "
                        "en PayPal para reactivar tu suscripci√≥n."
                    ),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Error al notificar suspensi√≥n al usuario {user_id}: {str(e)}")
            
            logger.info(f"Suscripci√≥n {sub_id} suspendida")
            
        elif event_type == "BILLING.SUBSCRIPTION.PAYMENT.FAILED":
            # Notificar al usuario sobre el pago fallido
            try:
                bot.send_message(
                    chat_id=user_id,
                    text=(
                        "‚ö†Ô∏è *Pago fallido*\n\n"
                        "No pudimos procesar el pago de tu suscripci√≥n. Por favor, verifica tu m√©todo de pago "
                        "en PayPal para evitar la cancelaci√≥n de tu acceso al grupo VIP."
                    ),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Error al notificar pago fallido al usuario {user_id}: {str(e)}")
            
            logger.info(f"Pago fallido para suscripci√≥n {sub_id}")
            
        elif event_type == "PAYMENT.SALE.COMPLETED":
            # Un pago fue completado exitosamente (renovaci√≥n)
            plan_id = subscription['plan']
            plan = PLANS.get(plan_id)
            
            if not plan:
                logger.error(f"Plan no encontrado para suscripci√≥n {sub_id}")
                return False
            
            # Calcular nueva fecha de expiraci√≥n
            current_end_date = datetime.datetime.fromisoformat(subscription['end_date'])
            new_end_date = current_end_date + datetime.timedelta(days=plan['duration_days'])
            
            # Extender la suscripci√≥n
            db.extend_subscription(sub_id, new_end_date)
            
            # Notificar al usuario
            try:
                bot.send_message(
                    chat_id=user_id,
                    text=(
                        "‚úÖ *Suscripci√≥n renovada exitosamente*\n\n"
                        f"Tu suscripci√≥n al grupo VIP ha sido renovada hasta el {new_end_date.strftime('%d %b %Y')}.\n"
                        "¬°Gracias por tu continuado apoyo!"
                    ),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Error al notificar renovaci√≥n al usuario {user_id}: {str(e)}")
            
            logger.info(f"Suscripci√≥n {sub_id} renovada hasta {new_end_date}")
        
        return True
        
    except Exception as e:
        logger.error(f"Error en update_subscription_from_webhook: {str(e)}")
        return False